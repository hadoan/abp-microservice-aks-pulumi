{
    "version": 3,
    "deployment": {
        "manifest": {
            "time": "2020-05-18T16:42:55.7785818+08:00",
            "magic": "c0971f4f1c8c7843a3b5a47b2acfa665756cef9834be691a99dfd758588f9539",
            "version": "v2.2.1"
        },
        "secrets_providers": {
            "type": "service",
            "state": {
                "url": "https://api.pulumi.com",
                "owner": "haulio",
                "project": "abp-microservice-aks",
                "stack": "dev"
            }
        },
        "resources": [
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev",
                "custom": false,
                "type": "pulumi:pulumi:Stack",
                "outputs": {
                    "name": "aks-pulumi"
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "custom": false,
                "type": "kubernetes:helm.sh/v2:Chart",
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev"
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0",
                "custom": true,
                "id": "1f571376-15db-484f-9db7-c9a7c7e332c4",
                "type": "pulumi:providers:kubernetes",
                "inputs": {
                    "version": "2.0.0"
                },
                "outputs": {
                    "version": "2.0.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "custom": false,
                "type": "kubernetes:helm.sh/v2:Chart",
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev"
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "custom": false,
                "type": "kubernetes:helm.sh/v2:Chart",
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev"
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                "custom": false,
                "type": "kubernetes:helm.sh/v2:Chart",
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev"
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "custom": false,
                "type": "kubernetes:helm.sh/v2:Chart",
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev"
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:Role::nginx-ingress",
                "custom": true,
                "id": "default/nginx-ingress",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "pods",
                                "secrets",
                                "endpoints"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "services"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "update",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "ingress-controller-leader-nginx"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "endpoints"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "namespaces"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps",
                                    "pods",
                                    "secrets",
                                    "endpoints"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "services"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "update",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "extensions",
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "extensions",
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "ingress-controller-leader-nginx"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "endpoints"
                                ],
                                "verbs": [
                                    "create",
                                    "get",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"namespaces\"],\"verbs\":[\"get\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\",\"pods\",\"secrets\",\"endpoints\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"services\"],\"verbs\":[\"get\",\"list\",\"update\",\"watch\"]},{\"apiGroups\":[\"extensions\",\"networking.k8s.io\"],\"resources\":[\"ingresses\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"extensions\",\"networking.k8s.io\"],\"resources\":[\"ingresses/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"\"],\"resourceNames\":[\"ingress-controller-leader-nginx\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\",\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"create\"]},{\"apiGroups\":[\"\"],\"resources\":[\"endpoints\"],\"verbs\":[\"create\",\"get\",\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress",
                        "namespace": "default",
                        "resourceVersion": "4013",
                        "selfLink": "/apis/rbac.authorization.k8s.io/v1/namespaces/default/roles/nginx-ingress",
                        "uid": "7b70b3d9-f8a0-4003-9ecd-551615d13678"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "namespaces"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps",
                                "pods",
                                "secrets",
                                "endpoints"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "services"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "update",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "extensions",
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "ingress-controller-leader-nginx"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "endpoints"
                            ],
                            "verbs": [
                                "create",
                                "get",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1alpha1:Role::nginx-ingress",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1beta1:Role::nginx-ingress"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:core/v1:ConfigMap::auth-server-host",
                "custom": true,
                "id": "default/auth-server-host",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "appsettings.Production.json": "\n                    {\n                        \"ConnectionStrings\": {\n                          \"Default\": \"Server=localhost;Database=MsDemo_Identity;Trusted_Connection=True;MultipleActiveResultSets=true\"\n                        },\n                        \"ElasticSearch\": {\n                          \"Url\": \"http://localhost:9200\"\n                        },\n                        \"Redis\": {\n                          \"Configuration\": \"127.0.0.1\"\n                        },\n                        \"RabbitMQ\": {\n                          \"Connections\": {\n                            \"Default\": {\n                              \"HostName\": \"localhost\"\n                            }\n                          },\n                          \"EventBus\": {\n                            \"ClientName\": \"MsDemo_AuthServer\",\n                            \"ExchangeName\": \"MsDemo\"\n                          }\n                        },\n                        \"Logging\": {\n                          \"LogLevel\": {\n                            \"Default\": \"Warning\"\n                          }\n                        },\n                        \"AllowedHosts\": \"*\"\n                      }\n                      \n                "
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "appsettings.Production.json": "\n                    {\n                        \"ConnectionStrings\": {\n                          \"Default\": \"Server=localhost;Database=MsDemo_Identity;Trusted_Connection=True;MultipleActiveResultSets=true\"\n                        },\n                        \"ElasticSearch\": {\n                          \"Url\": \"http://localhost:9200\"\n                        },\n                        \"Redis\": {\n                          \"Configuration\": \"127.0.0.1\"\n                        },\n                        \"RabbitMQ\": {\n                          \"Connections\": {\n                            \"Default\": {\n                              \"HostName\": \"localhost\"\n                            }\n                          },\n                          \"EventBus\": {\n                            \"ClientName\": \"MsDemo_AuthServer\",\n                            \"ExchangeName\": \"MsDemo\"\n                          }\n                        },\n                        \"Logging\": {\n                          \"LogLevel\": {\n                            \"Default\": \"Warning\"\n                          }\n                        },\n                        \"AllowedHosts\": \"*\"\n                      }\n                      \n                "
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "auth-server-host"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "appsettings.Production.json": "\n                    {\n                        \"ConnectionStrings\": {\n                          \"Default\": \"Server=localhost;Database=MsDemo_Identity;Trusted_Connection=True;MultipleActiveResultSets=true\"\n                        },\n                        \"ElasticSearch\": {\n                          \"Url\": \"http://localhost:9200\"\n                        },\n                        \"Redis\": {\n                          \"Configuration\": \"127.0.0.1\"\n                        },\n                        \"RabbitMQ\": {\n                          \"Connections\": {\n                            \"Default\": {\n                              \"HostName\": \"localhost\"\n                            }\n                          },\n                          \"EventBus\": {\n                            \"ClientName\": \"MsDemo_AuthServer\",\n                            \"ExchangeName\": \"MsDemo\"\n                          }\n                        },\n                        \"Logging\": {\n                          \"LogLevel\": {\n                            \"Default\": \"Warning\"\n                          }\n                        },\n                        \"AllowedHosts\": \"*\"\n                      }\n                      \n                "
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"appsettings.Production.json\":\"\\n                    {\\n                        \\\"ConnectionStrings\\\": {\\n                          \\\"Default\\\": \\\"Server=localhost;Database=MsDemo_Identity;Trusted_Connection=True;MultipleActiveResultSets=true\\\"\\n                        },\\n                        \\\"ElasticSearch\\\": {\\n                          \\\"Url\\\": \\\"http://localhost:9200\\\"\\n                        },\\n                        \\\"Redis\\\": {\\n                          \\\"Configuration\\\": \\\"127.0.0.1\\\"\\n                        },\\n                        \\\"RabbitMQ\\\": {\\n                          \\\"Connections\\\": {\\n                            \\\"Default\\\": {\\n                              \\\"HostName\\\": \\\"localhost\\\"\\n                            }\\n                          },\\n                          \\\"EventBus\\\": {\\n                            \\\"ClientName\\\": \\\"MsDemo_AuthServer\\\",\\n                            \\\"ExchangeName\\\": \\\"MsDemo\\\"\\n                          }\\n                        },\\n                        \\\"Logging\\\": {\\n                          \\\"LogLevel\\\": {\\n                            \\\"Default\\\": \\\"Warning\\\"\\n                          }\\n                        },\\n                        \\\"AllowedHosts\\\": \\\"*\\\"\\n                      }\\n                      \\n                \"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"auth-server-host\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host",
                        "namespace": "default",
                        "resourceVersion": "4014",
                        "selfLink": "/api/v1/namespaces/default/configmaps/auth-server-host",
                        "uid": "bf68569f-1dd2-4bbd-ab4e-165e3bbd8d41"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:networking.k8s.io/v1beta1:Ingress::ingress-service",
                "custom": true,
                "id": "default/ingress-service",
                "type": "kubernetes:networking.k8s.io/v1beta1:Ingress",
                "inputs": {
                    "apiVersion": "networking.k8s.io/v1beta1",
                    "kind": "Ingress",
                    "metadata": {
                        "annotations": {
                            "kubernetes.io/ingress.class": "nginx",
                            "nginx.ingress.kubernetes.io/cors-allow-methods": "PUT, GET, POST, OPTIONS",
                            "nginx.ingress.kubernetes.io/force-ssl-redirect": "false",
                            "nginx.ingress.kubernetes.io/rewrite-target": "/",
                            "nginx.ingress.kubernetes.io/ssl-redirect": "false"
                        },
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "ingress-service"
                    },
                    "spec": {
                        "rules": [
                            {
                                "http": {
                                    "paths": [
                                        {
                                            "backend": {
                                                "serviceName": "auth-server-host",
                                                "servicePort": 80
                                            },
                                            "path": "/auth-server"
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "networking.k8s.io/v1beta1",
                    "__inputs": {
                        "apiVersion": "networking.k8s.io/v1beta1",
                        "kind": "Ingress",
                        "metadata": {
                            "annotations": {
                                "kubernetes.io/ingress.class": "nginx",
                                "nginx.ingress.kubernetes.io/cors-allow-methods": "PUT, GET, POST, OPTIONS",
                                "nginx.ingress.kubernetes.io/force-ssl-redirect": "false",
                                "nginx.ingress.kubernetes.io/rewrite-target": "/",
                                "nginx.ingress.kubernetes.io/ssl-redirect": "false"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "ingress-service"
                        },
                        "spec": {
                            "rules": [
                                {
                                    "http": {
                                        "paths": [
                                            {
                                                "backend": {
                                                    "serviceName": "auth-server-host",
                                                    "servicePort": 80
                                                },
                                                "path": "/auth-server"
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "networking.k8s.io/v1beta1",
                    "kind": "Ingress",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"networking.k8s.io/v1beta1\",\"kind\":\"Ingress\",\"metadata\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"nginx\",\"nginx.ingress.kubernetes.io/cors-allow-methods\":\"PUT, GET, POST, OPTIONS\",\"nginx.ingress.kubernetes.io/force-ssl-redirect\":\"false\",\"nginx.ingress.kubernetes.io/rewrite-target\":\"/\",\"nginx.ingress.kubernetes.io/ssl-redirect\":\"false\"},\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"ingress-service\"},\"spec\":{\"rules\":[{\"http\":{\"paths\":[{\"backend\":{\"serviceName\":\"auth-server-host\",\"servicePort\":80},\"path\":\"/auth-server\"}]}}]}}\n",
                            "kubernetes.io/ingress.class": "nginx",
                            "nginx.ingress.kubernetes.io/cors-allow-methods": "PUT, GET, POST, OPTIONS",
                            "nginx.ingress.kubernetes.io/force-ssl-redirect": "false",
                            "nginx.ingress.kubernetes.io/rewrite-target": "/",
                            "nginx.ingress.kubernetes.io/ssl-redirect": "false"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "ingress-service",
                        "namespace": "default",
                        "resourceVersion": "4016",
                        "selfLink": "/apis/networking.k8s.io/v1beta1/namespaces/default/ingresses/ingress-service",
                        "uid": "3ff2d5cb-4f09-42af-8e83-70524479243c"
                    },
                    "spec": {
                        "rules": [
                            {
                                "http": {
                                    "paths": [
                                        {
                                            "backend": {
                                                "serviceName": "auth-server-host",
                                                "servicePort": 80
                                            },
                                            "path": "/auth-server"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:extensions/v1beta1:Ingress::ingress-service"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::nginx-ingress",
                "custom": true,
                "id": "default/nginx-ingress",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "nginx-ingress"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "nginx-ingress",
                            "namespace": "default"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "nginx-ingress"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "nginx-ingress",
                                "namespace": "default"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"nginx-ingress\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"nginx-ingress\",\"namespace\":\"default\"}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress",
                        "namespace": "default",
                        "resourceVersion": "4018",
                        "selfLink": "/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings/nginx-ingress",
                        "uid": "ebd434fc-b6c9-4360-8b47-385f0d774a48"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "nginx-ingress"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "nginx-ingress",
                            "namespace": "default"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding::nginx-ingress",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding::nginx-ingress"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ConfigMap::default/redis",
                "custom": true,
                "id": "default/redis",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "master.conf": "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",
                        "redis.conf": "# User-supplied configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"",
                        "replica.conf": "dir /data\nslave-read-only yes\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis",
                        "namespace": "default"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "master.conf": "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",
                            "redis.conf": "# User-supplied configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"",
                            "replica.conf": "dir /data\nslave-read-only yes\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis",
                            "namespace": "default"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "master.conf": "dir /data\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\"",
                        "redis.conf": "# User-supplied configuration:\n# Enable AOF https://redis.io/topics/persistence#append-only-file\nappendonly yes\n# Disable RDB persistence, AOF persistence already enabled.\nsave \"\"",
                        "replica.conf": "dir /data\nslave-read-only yes\nrename-command FLUSHDB \"\"\nrename-command FLUSHALL \"\""
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"master.conf\":\"dir /data\\nrename-command FLUSHDB \\\"\\\"\\nrename-command FLUSHALL \\\"\\\"\",\"redis.conf\":\"# User-supplied configuration:\\n# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Disable RDB persistence, AOF persistence already enabled.\\nsave \\\"\\\"\",\"replica.conf\":\"dir /data\\nslave-read-only yes\\nrename-command FLUSHDB \\\"\\\"\\nrename-command FLUSHALL \\\"\\\"\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis\",\"namespace\":\"default\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:57Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis",
                        "namespace": "default",
                        "resourceVersion": "4063",
                        "selfLink": "/api/v1/namespaces/default/configmaps/redis",
                        "uid": "80331828-831f-4574-a5ae-55e11093fa52"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Secret::default/redis",
                "custom": true,
                "id": "default/redis",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAO6RIt6zF6Omn1K8U011KRZCLuSnRm+biXBLh16HSlRSvp58KvosbkJNLHaRneNsDvBCPZXAWANmqAl+YLU482JD"
                    },
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis",
                        "namespace": "default"
                    },
                    "type": "Opaque"
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "AAABAB/f49GG7UXmtxVprfbYddmNMtWfBfBmaL2dtrQuRvG3rMSZd3qmXBxIWaKIqJkkdpli9I9iEmbIx7bsrPCB8HTM"
                        },
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis",
                            "namespace": "default"
                        },
                        "type": "Opaque"
                    },
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABABh4qVdA/Nz3bYKw6iTMUE1Bsfvi4j1cPpjJ9RNmGtlM8Sldm4GTqenErmJ64ZwIplhEw2kq6g8xTjmyw829BP0Y"
                    },
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "AAABAMGgl0rWYq9muGDXANIPpDbZ+luRkU68bxUUMJh9OPOx1ACoTXl9AdDDAfnBAOjObFpL7uv/qPOs25305XhHW9Ff6I10Iy/Eu+bv3N6MFVYTySj3YHa+J3doPBgU15kjvcO5waJOHxgxcs3A9rO5ZWhjQ8j85lih1DliehkHBtE5Bi6BP7vnRxgfyAqPd47Cr/No8aQJss8VxeIrzg/4D6rJvYTSp540cLLaEVBFmXPv9BIyatsnLjyrkdzbY40LtXe/0ZY7s5n4D1ZKryY6VLaoskiXISkBma+aBEi8h2g/UeSj8HKXEy4O9V3wSG1evaCZQuseO5cIhKMargHuRUAc7gBoJsqR5uF5zKBaWC6zNDzqmC/UUkJm9mRPNLO0CEAUoBNwSLBC4TLO3ZBqrvIf+UD94eTO++ilNS1Se4+qQDOvV6tn+AEWfCAFuXXy/8kDrq38XlnMgktDNX14yfnD"
                            }
                        },
                        "creationTimestamp": "2020-05-18T08:32:57Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis",
                        "namespace": "default",
                        "resourceVersion": "4064",
                        "selfLink": "/api/v1/namespaces/default/secrets/redis",
                        "uid": "96c04b97-8024-497b-993b-63d65a620087"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null,
                    "type": null
                },
                "additionalSecretOutputs": [
                    "data",
                    "stringData"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ServiceAccount::nginx-ingress",
                "custom": true,
                "id": "default/nginx-ingress",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress",
                        "namespace": "default",
                        "resourceVersion": "4046",
                        "selfLink": "/api/v1/namespaces/default/serviceaccounts/nginx-ingress",
                        "uid": "abb6ef97-7486-494d-b554-7dd4812460a0"
                    },
                    "secrets": [
                        {
                            "name": "nginx-ingress-token-8d7mv"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ServiceAccount::nginx-ingress-backend",
                "custom": true,
                "id": "default/nginx-ingress-backend",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-backend"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress-backend"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress-backend\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-backend",
                        "namespace": "default",
                        "resourceVersion": "4041",
                        "selfLink": "/api/v1/namespaces/default/serviceaccounts/nginx-ingress-backend",
                        "uid": "eb8e41af-5eea-46eb-818d-7e5c58a4ddcb"
                    },
                    "secrets": [
                        {
                            "name": "nginx-ingress-backend-token-tkqtl"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ConfigMap::default/redis-health",
                "custom": true,
                "id": "default/redis-health",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "ping_liveness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                        "ping_liveness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_readiness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                        "ping_readiness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\n response=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-health",
                        "namespace": "default"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "ping_liveness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                            "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                            "ping_liveness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                            "ping_readiness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                            "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                            "ping_readiness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\n response=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-health",
                            "namespace": "default"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "ping_liveness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_liveness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_liveness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_liveness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                        "ping_liveness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ] \u0026\u0026 [ \"$response\" != \"LOADING Redis is loading the dataset in memory\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_readiness_local.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\nresponse=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_PASSWORD $no_auth_warning \\\n    -h localhost \\\n    -p $REDIS_PORT \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi",
                        "ping_readiness_local_and_master.sh": "script_dir=\"$(dirname \"$0\")\"\nexit_status=0\n\"$script_dir/ping_readiness_local.sh\" $1 || exit_status=$?\n\"$script_dir/ping_readiness_master.sh\" $1 || exit_status=$?\nexit $exit_status",
                        "ping_readiness_master.sh": "#!/bin/bash\nno_auth_warning=$([[ \"$(redis-cli --version)\" =~ (redis-cli 5.*) ]] \u0026\u0026 echo --no-auth-warning)\n response=$(\n  timeout -s 3 $1 \\\n  redis-cli \\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\n    -h $REDIS_MASTER_HOST \\\n    -p $REDIS_MASTER_PORT_NUMBER \\\n    ping\n)\nif [ \"$response\" != \"PONG\" ]; then\n  echo \"$response\"\n  exit 1\nfi"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"ping_liveness_local.sh\":\"#!/bin/bash\\nno_auth_warning=$([[ \\\"$(redis-cli --version)\\\" =~ (redis-cli 5.*) ]] \\u0026\\u0026 echo --no-auth-warning)\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -a $REDIS_PASSWORD $no_auth_warning \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\\"$response\\\" != \\\"PONG\\\" ] \\u0026\\u0026 [ \\\"$response\\\" != \\\"LOADING Redis is loading the dataset in memory\\\" ]; then\\n  echo \\\"$response\\\"\\n  exit 1\\nfi\",\"ping_liveness_local_and_master.sh\":\"script_dir=\\\"$(dirname \\\"$0\\\")\\\"\\nexit_status=0\\n\\\"$script_dir/ping_liveness_local.sh\\\" $1 || exit_status=$?\\n\\\"$script_dir/ping_liveness_master.sh\\\" $1 || exit_status=$?\\nexit $exit_status\",\"ping_liveness_master.sh\":\"#!/bin/bash\\nno_auth_warning=$([[ \\\"$(redis-cli --version)\\\" =~ (redis-cli 5.*) ]] \\u0026\\u0026 echo --no-auth-warning)\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\\"$response\\\" != \\\"PONG\\\" ] \\u0026\\u0026 [ \\\"$response\\\" != \\\"LOADING Redis is loading the dataset in memory\\\" ]; then\\n  echo \\\"$response\\\"\\n  exit 1\\nfi\",\"ping_readiness_local.sh\":\"#!/bin/bash\\nno_auth_warning=$([[ \\\"$(redis-cli --version)\\\" =~ (redis-cli 5.*) ]] \\u0026\\u0026 echo --no-auth-warning)\\nresponse=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -a $REDIS_PASSWORD $no_auth_warning \\\\\\n    -h localhost \\\\\\n    -p $REDIS_PORT \\\\\\n    ping\\n)\\nif [ \\\"$response\\\" != \\\"PONG\\\" ]; then\\n  echo \\\"$response\\\"\\n  exit 1\\nfi\",\"ping_readiness_local_and_master.sh\":\"script_dir=\\\"$(dirname \\\"$0\\\")\\\"\\nexit_status=0\\n\\\"$script_dir/ping_readiness_local.sh\\\" $1 || exit_status=$?\\n\\\"$script_dir/ping_readiness_master.sh\\\" $1 || exit_status=$?\\nexit $exit_status\",\"ping_readiness_master.sh\":\"#!/bin/bash\\nno_auth_warning=$([[ \\\"$(redis-cli --version)\\\" =~ (redis-cli 5.*) ]] \\u0026\\u0026 echo --no-auth-warning)\\n response=$(\\n  timeout -s 3 $1 \\\\\\n  redis-cli \\\\\\n    -a $REDIS_MASTER_PASSWORD $no_auth_warning \\\\\\n    -h $REDIS_MASTER_HOST \\\\\\n    -p $REDIS_MASTER_PORT_NUMBER \\\\\\n    ping\\n)\\nif [ \\\"$response\\\" != \\\"PONG\\\" ]; then\\n  echo \\\"$response\\\"\\n  exit 1\\nfi\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-health\",\"namespace\":\"default\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:59Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-health",
                        "namespace": "default",
                        "resourceVersion": "4085",
                        "selfLink": "/api/v1/namespaces/default/configmaps/redis-health",
                        "uid": "5753f146-e1c7-4115-a329-9ca2b85a1cd9"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Secret::default/rabbitmq",
                "custom": true,
                "id": "default/rabbitmq",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABADktazoTVgR1hAYWiJObCfKPUWFHA8Lz1ATfa8kR7PRWxsfW8YZ8LPGxC48R0FVVm8prUHSCUK51kSZ7K0YpHW7r+WVSjFEZjYzzgosvRWQoGBbZy2doxYYI6AO2JFDgGtJmdwYXtwBgxQxfWVfair1g3L8PjSGBKH3YE5luNljG9e+IyW2QQdIoxssw"
                    },
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default"
                    },
                    "type": "Opaque"
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "AAABAL5kunHE/Ouy8ovt6QNSHhTnNlttV0gaTZDMNpOyc1sHJsAOvXBx2OwUG3lU3W3dtZ73rMQi55sNOnfblZ4sMeGnX7Ku1aj9TR2RLTZTAt2qesZVrltuHV2V0feuzTDwBAmzb46xNOljlN75b1EautwSUFlDo8sjOS0N3jV3RsiBBwjXy1kMTlvDWW7M"
                        },
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq",
                            "namespace": "default"
                        },
                        "type": "Opaque"
                    },
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABANfDsCaXguybXtGMYs74f2iqm5HVS10qxUsjwYigjvTfd3c3bd3pU/xD8drLUJ5+AXI1Sj8lsLwnriLfsc8RGJH4g0NkeL8Lz586qBzRCa2aodhnCDYJMoENMuYZ75qqWVCWekDbZly3DlcHkYEuw4tiNU51gVEU3jixDRzmnKDh3o++4C12diOGkkQX"
                    },
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "AAABAN5u2GNk577FX27Re5Z6KNS6Fax0YMmyH7pw1LFMwoxW7XSQ17LygYLKp55rWJmdMX0C9eH0S7sinUjzckz6DVRDYG5+Lb8GYaQXIXvcxFmE8LTwxu9gylEFeVNOEv55JyoEj71cUn4fbdCxoclQcLlsb3Moot5OBe4WovucAuZiGXQrfaFUTk3P/9rcVSy1jyuectiXIxftAuDLLMeYnv926A/uKbQoe9vVvBgtLutb0ZhFJX5y56NHOl0X2VhfjjUcyr7SR3RN7Yf6jtRiEUzdtE1JP78c9oYnbsB9pbbZ+8yQgfRuhXKNrpsCfRwHWhgRx7wYFCSaq/iwRS8dX1g4cW8EjT2AXvx5aBEBtljIQh3Ng2RKBCmUib6kyh0GSfYY2oWKfjx/zLm/Fh2hFGMnzdxFb5vbWB3Do5gaY7k8xW9HWnUY0p2HZ6kDViZYm0WPwW2hRYUPixf27txElWQ4aOk0+5WZf82HzOQdfpU0DHerhXkMpuxuNqLQHB06SGp7RtiJjJgdueSxFwEDW9slWsJ4AD8hFLdbRNHkO0oa3RTLAelmE2N1dpPlmbXoA4xRx+6sKuDvpPHKRA=="
                            }
                        },
                        "creationTimestamp": "2020-05-18T08:33:00Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default",
                        "resourceVersion": "4121",
                        "selfLink": "/api/v1/namespaces/default/secrets/rabbitmq",
                        "uid": "347f3505-a328-4d09-831a-1371c89e936f"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null,
                    "type": null
                },
                "additionalSecretOutputs": [
                    "data",
                    "stringData"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ConfigMap::default/rabbitmq-config",
                "custom": true,
                "id": "default/rabbitmq-config",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "enabled_plugins": "[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].",
                        "rabbitmq.conf": "##username and password\ndefault_user=user\ndefault_pass=CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator=min-masters\n# enable guest user\nloopback_users.guest = false\n#disk_free_limit.absolute = 50MB\n#management.load_definitions = /app/load_definition.json"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-config",
                        "namespace": "default"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "enabled_plugins": "[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].",
                            "rabbitmq.conf": "##username and password\ndefault_user=user\ndefault_pass=CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator=min-masters\n# enable guest user\nloopback_users.guest = false\n#disk_free_limit.absolute = 50MB\n#management.load_definitions = /app/load_definition.json"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq-config",
                            "namespace": "default"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "enabled_plugins": "[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].",
                        "rabbitmq.conf": "##username and password\ndefault_user=user\ndefault_pass=CHANGEME\n## Clustering\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = autoheal\n# queue master locator\nqueue_master_locator=min-masters\n# enable guest user\nloopback_users.guest = false\n#disk_free_limit.absolute = 50MB\n#management.load_definitions = /app/load_definition.json"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"enabled_plugins\":\"[rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap].\",\"rabbitmq.conf\":\"##username and password\\ndefault_user=user\\ndefault_pass=CHANGEME\\n## Clustering\\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\\ncluster_formation.k8s.host = kubernetes.default.svc.cluster.local\\ncluster_formation.node_cleanup.interval = 10\\ncluster_formation.node_cleanup.only_log_warning = true\\ncluster_partition_handling = autoheal\\n# queue master locator\\nqueue_master_locator=min-masters\\n# enable guest user\\nloopback_users.guest = false\\n#disk_free_limit.absolute = 50MB\\n#management.load_definitions = /app/load_definition.json\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq-config\",\"namespace\":\"default\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:01Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-config",
                        "namespace": "default",
                        "resourceVersion": "4132",
                        "selfLink": "/api/v1/namespaces/default/configmaps/rabbitmq-config",
                        "uid": "fc8d097b-0182-4f8c-ba33-8e2f657a1aed"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ConfigMap::default/rabbitmq-healthchecks",
                "custom": true,
                "id": "default/rabbitmq-healthchecks",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "rabbitmq-api-check": "#!/bin/sh\nset -e\nURL=$1\nEXPECTED=$2\nACTUAL=$(curl --silent --show-error --fail \"${URL}\")\necho \"${ACTUAL}\"\ntest \"${EXPECTED}\" = \"${ACTUAL}\"",
                        "rabbitmq-health-check": "#!/bin/sh\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\nif [ -f ${START_FLAG} ]; then\n    rabbitmqctl node_health_check\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n      rabbitmqctl status\n      exit $?\n    fi\n    rm -f ${START_FLAG}\n    exit ${RESULT}\nfi\nrabbitmq-api-check $1 $2"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-healthchecks",
                        "namespace": "default"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "rabbitmq-api-check": "#!/bin/sh\nset -e\nURL=$1\nEXPECTED=$2\nACTUAL=$(curl --silent --show-error --fail \"${URL}\")\necho \"${ACTUAL}\"\ntest \"${EXPECTED}\" = \"${ACTUAL}\"",
                            "rabbitmq-health-check": "#!/bin/sh\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\nif [ -f ${START_FLAG} ]; then\n    rabbitmqctl node_health_check\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n      rabbitmqctl status\n      exit $?\n    fi\n    rm -f ${START_FLAG}\n    exit ${RESULT}\nfi\nrabbitmq-api-check $1 $2"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq-healthchecks",
                            "namespace": "default"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "rabbitmq-api-check": "#!/bin/sh\nset -e\nURL=$1\nEXPECTED=$2\nACTUAL=$(curl --silent --show-error --fail \"${URL}\")\necho \"${ACTUAL}\"\ntest \"${EXPECTED}\" = \"${ACTUAL}\"",
                        "rabbitmq-health-check": "#!/bin/sh\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\nif [ -f ${START_FLAG} ]; then\n    rabbitmqctl node_health_check\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n      rabbitmqctl status\n      exit $?\n    fi\n    rm -f ${START_FLAG}\n    exit ${RESULT}\nfi\nrabbitmq-api-check $1 $2"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"rabbitmq-api-check\":\"#!/bin/sh\\nset -e\\nURL=$1\\nEXPECTED=$2\\nACTUAL=$(curl --silent --show-error --fail \\\"${URL}\\\")\\necho \\\"${ACTUAL}\\\"\\ntest \\\"${EXPECTED}\\\" = \\\"${ACTUAL}\\\"\",\"rabbitmq-health-check\":\"#!/bin/sh\\nSTART_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\\nif [ -f ${START_FLAG} ]; then\\n    rabbitmqctl node_health_check\\n    RESULT=$?\\n    if [ $RESULT -ne 0 ]; then\\n      rabbitmqctl status\\n      exit $?\\n    fi\\n    rm -f ${START_FLAG}\\n    exit ${RESULT}\\nfi\\nrabbitmq-api-check $1 $2\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq-healthchecks\",\"namespace\":\"default\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:02Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-healthchecks",
                        "namespace": "default",
                        "resourceVersion": "4143",
                        "selfLink": "/api/v1/namespaces/default/configmaps/rabbitmq-healthchecks",
                        "uid": "94c7df6c-013b-4f87-8f0d-29ba2674361a"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::default/rabbitmq-endpoint-reader",
                "custom": true,
                "id": "default/rabbitmq-endpoint-reader",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-endpoint-reader",
                        "namespace": "default"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "rabbitmq-endpoint-reader"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "rabbitmq"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq-endpoint-reader",
                            "namespace": "default"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "rabbitmq-endpoint-reader"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "rabbitmq"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq-endpoint-reader\",\"namespace\":\"default\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"rabbitmq-endpoint-reader\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"rabbitmq\"}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:02Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-endpoint-reader",
                        "namespace": "default",
                        "resourceVersion": "4144",
                        "selfLink": "/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings/rabbitmq-endpoint-reader",
                        "uid": "b652d0b0-4f3f-4c35-aa15-e92881497aa3"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "rabbitmq-endpoint-reader"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "rabbitmq"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding::default/rabbitmq-endpoint-reader",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding::default/rabbitmq-endpoint-reader"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ServiceAccount::default/rabbitmq",
                "custom": true,
                "id": "default/rabbitmq",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default"
                    },
                    "secrets": [
                        {
                            "name": "rabbitmq"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq",
                            "namespace": "default"
                        },
                        "secrets": [
                            {
                                "name": "rabbitmq"
                            }
                        ]
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq\",\"namespace\":\"default\"},\"secrets\":[{\"name\":\"rabbitmq\"}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:01Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default",
                        "resourceVersion": "4131",
                        "selfLink": "/api/v1/namespaces/default/serviceaccounts/rabbitmq",
                        "uid": "a1a62947-2666-4fe8-8a35-62c6bbfe57f7"
                    },
                    "secrets": [
                        {
                            "name": "rabbitmq"
                        },
                        {
                            "name": "rabbitmq-token-nc7n5"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "secrets": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1:Role::default/rabbitmq-endpoint-reader",
                "custom": true,
                "id": "default/rabbitmq-endpoint-reader",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-endpoint-reader",
                        "namespace": "default"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "endpoints"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq-endpoint-reader",
                            "namespace": "default"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "endpoints"
                                ],
                                "verbs": [
                                    "get"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq-endpoint-reader\",\"namespace\":\"default\"},\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"endpoints\"],\"verbs\":[\"get\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:03Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-endpoint-reader",
                        "namespace": "default",
                        "resourceVersion": "4157",
                        "selfLink": "/apis/rbac.authorization.k8s.io/v1/namespaces/default/roles/rabbitmq-endpoint-reader",
                        "uid": "d1c6c1c5-494c-4b17-912f-8aade1200aeb"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "endpoints"
                            ],
                            "verbs": [
                                "get"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1alpha1:Role::default/rabbitmq-endpoint-reader",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:rbac.authorization.k8s.io/v1beta1:Role::default/rabbitmq-endpoint-reader"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:policy/v1beta1:PodDisruptionBudget::elasticsearch-master-pdb",
                "custom": true,
                "id": "default/elasticsearch-master-pdb",
                "type": "kubernetes:policy/v1beta1:PodDisruptionBudget",
                "inputs": {
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodDisruptionBudget",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "elasticsearch-master-pdb"
                    },
                    "spec": {
                        "maxUnavailable": 1,
                        "selector": {
                            "matchLabels": {
                                "app": "elasticsearch-master"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "policy/v1beta1",
                    "__inputs": {
                        "apiVersion": "policy/v1beta1",
                        "kind": "PodDisruptionBudget",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "elasticsearch-master-pdb"
                        },
                        "spec": {
                            "maxUnavailable": 1,
                            "selector": {
                                "matchLabels": {
                                    "app": "elasticsearch-master"
                                }
                            }
                        }
                    },
                    "apiVersion": "policy/v1beta1",
                    "kind": "PodDisruptionBudget",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"policy/v1beta1\",\"kind\":\"PodDisruptionBudget\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"elasticsearch-master-pdb\"},\"spec\":{\"maxUnavailable\":1,\"selector\":{\"matchLabels\":{\"app\":\"elasticsearch-master\"}}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:03Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "elasticsearch-master-pdb",
                        "namespace": "default",
                        "resourceVersion": "4160",
                        "selfLink": "/apis/policy/v1beta1/namespaces/default/poddisruptionbudgets/elasticsearch-master-pdb",
                        "uid": "d0230ff3-e531-485b-86fb-7ab540469e13"
                    },
                    "spec": {
                        "maxUnavailable": 1,
                        "selector": {
                            "matchLabels": {
                                "app": "elasticsearch-master"
                            }
                        }
                    },
                    "status": {
                        "currentHealthy": 0,
                        "desiredHealthy": 0,
                        "disruptionsAllowed": 0,
                        "expectedPods": 0,
                        "observedGeneration": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:ServiceAccount::default/mongodb",
                "custom": true,
                "id": "default/mongodb",
                "type": "kubernetes:core/v1:ServiceAccount",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default"
                    },
                    "secrets": [
                        {
                            "name": "mongodb"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "ServiceAccount",
                        "metadata": {
                            "labels": {
                                "app": "mongodb",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "mongodb-7.14.1",
                                "heritage": "Helm",
                                "release": "mongodb"
                            },
                            "name": "mongodb",
                            "namespace": "default"
                        },
                        "secrets": [
                            {
                                "name": "mongodb"
                            }
                        ]
                    },
                    "apiVersion": "v1",
                    "kind": "ServiceAccount",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"labels\":{\"app\":\"mongodb\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"mongodb-7.14.1\",\"heritage\":\"Helm\",\"release\":\"mongodb\"},\"name\":\"mongodb\",\"namespace\":\"default\"},\"secrets\":[{\"name\":\"mongodb\"}]}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:05Z",
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default",
                        "resourceVersion": "4209",
                        "selfLink": "/api/v1/namespaces/default/serviceaccounts/mongodb",
                        "uid": "8458c766-d4af-4f2a-9c8d-bd1c6ebf7bcc"
                    },
                    "secrets": [
                        {
                            "name": "mongodb"
                        },
                        {
                            "name": "mongodb-token-wbbv9"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "secrets": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Secret::default/mongodb",
                "custom": true,
                "id": "default/mongodb",
                "type": "kubernetes:core/v1:Secret",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAHrTB3WQH6bzPLy6JWNtqA0N0WidJ5d9ew+97txuMh0ytGEZ32nQtQ90S4RINQuXaf2gQv51oBuiZM/K083flv+YUeS4hYwnPrakxrQqcMyfManmKoQsnb9fXerWOeTGfGafuIXBo3D07tg9jdif+EuO/hd4p2RLl/IShHoZrxFiDYw="
                    },
                    "kind": "Secret",
                    "metadata": {
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default"
                    },
                    "type": "Opaque"
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                            "ciphertext": "AAABAGogeGO5kMLua8t7hUo13JPArU36X3pDniHb9my215SkiprZSf65ksUHhHqXOXa1BtrOggT4lt7tQZ7EYvgXugWuA3gYQ2HkqnjqNvvKY/OifDR2qCFMoRTy795//T1JnbSbyZxVz60bEKDhcUDxgBywViMgpPEIaekuj306VEuctBo="
                        },
                        "kind": "Secret",
                        "metadata": {
                            "labels": {
                                "app": "mongodb",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "mongodb-7.14.1",
                                "heritage": "Helm",
                                "release": "mongodb"
                            },
                            "name": "mongodb",
                            "namespace": "default"
                        },
                        "type": "Opaque"
                    },
                    "apiVersion": "v1",
                    "data": {
                        "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                        "ciphertext": "AAABAJaFkExNQj63mdJ8l7SKbcr/uXWJc0WGXjmxBavfmm8ByPBSgsUkG6+ChThd+rMEA+jkEvKkVSF4oO7lwxsFGfg8I7BVH1t885DBFxkj6OBZ8bbR3pnHiWeW1wy3y7bAUNVnonE8i3vX+qMMyMeOFAeQjIZ9Yz3V6Dw4Y75DBsKKJoY="
                    },
                    "kind": "Secret",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": {
                                "4dabf18193072939515e22adb298388d": "1b47061264138c4ac30d75fd1eb44270",
                                "ciphertext": "AAABAFWUJ/e+icsnQCXSD/y2sScHcVSGPw5MM1trzu9mrsyEJyUnfZJFWNfCFXxAa+lf1b6WeUgZdGIQemHNL/IPOa8cpvp4K3CMezrmMwEBTbJ5T/KbTYQMbOytlg2ULspv0Y9iREvEqECFX3OOHGxrFzV9ZyO/5Bsf75fn7DZi+ppHd9gJxPdqiOI6R3Q4O+Imve747zMVq/KTKBzD0svX0bDeMqCtO8qaooxQ5j+ZwOMGfbvVS+dlax1ROFr8R8Y/ZzWY8Gm7CEYxLxNkCCUhxx2wLI+A5+Kk7eH5gTkqPygqRo2OlOZDj5kSjZSei6NkhNvyHSthdRDtRgGHDE1bJC1+ezjTNeUbLZNd/3hD8LwX7jTR9UzziFXxz8aV980tiBP7zG8gXICxn30B5/lI4UAL0N8dKiCMOfE8ese6tpsEJuy8qI5ib7MRuTtJHsjR2gXRDEl4OhAPuKAoxtU4c8CRRHKl/M1HxzKEGHP7YwhPV3Z7yjVRUhTPocePLsM+A1XS6h+Q6SZrTG07BlJjGHnn+PWdh6mATlycp1BufNYULg5OiehkbvPV7gjAHw=="
                            }
                        },
                        "creationTimestamp": "2020-05-18T08:33:06Z",
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default",
                        "resourceVersion": "4212",
                        "selfLink": "/api/v1/namespaces/default/secrets/mongodb",
                        "uid": "8e540fd4-4891-4dbd-8308-3ca23959ff3b"
                    },
                    "type": "Opaque"
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": null,
                    "kind": null,
                    "metadata": null,
                    "type": null
                },
                "additionalSecretOutputs": [
                    "data",
                    "stringData"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:core/v1:Service::auth-server-host",
                "custom": true,
                "id": "default/auth-server-host",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host"
                    },
                    "spec": {
                        "ports": [
                            {
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 80
                            }
                        ],
                        "selector": {
                            "app": "auth-server-host"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "auth-server-host"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "port": 80,
                                    "protocol": "TCP",
                                    "targetPort": 80
                                }
                            ],
                            "selector": {
                                "app": "auth-server-host"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"auth-server-host\"},\"spec\":{\"ports\":[{\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80}],\"selector\":{\"app\":\"auth-server-host\"}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host",
                        "namespace": "default",
                        "resourceVersion": "4021",
                        "selfLink": "/api/v1/namespaces/default/services/auth-server-host",
                        "uid": "ba6820f2-bb3d-42fb-92c5-0ec45baed932"
                    },
                    "spec": {
                        "clusterIP": "10.0.79.31",
                        "ports": [
                            {
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": 80
                            }
                        ],
                        "selector": {
                            "app": "auth-server-host"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::nginx-ingress-default-backend",
                "custom": true,
                "id": "default/nginx-ingress-default-backend",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "default-backend",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-default-backend"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "http"
                            }
                        ],
                        "selector": {
                            "app": "nginx-ingress",
                            "component": "default-backend",
                            "release": "nginx-ingress"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "component": "default-backend",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress-default-backend"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 80,
                                    "protocol": "TCP",
                                    "targetPort": "http"
                                }
                            ],
                            "selector": {
                                "app": "nginx-ingress",
                                "component": "default-backend",
                                "release": "nginx-ingress"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"component\":\"default-backend\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress-default-backend\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":\"http\"}],\"selector\":{\"app\":\"nginx-ingress\",\"component\":\"default-backend\",\"release\":\"nginx-ingress\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "default-backend",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-default-backend",
                        "namespace": "default",
                        "resourceVersion": "4027",
                        "selfLink": "/api/v1/namespaces/default/services/nginx-ingress-default-backend",
                        "uid": "4a83bb72-f83f-4063-8b9f-16e4afe0481a"
                    },
                    "spec": {
                        "clusterIP": "10.0.84.144",
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "http"
                            }
                        ],
                        "selector": {
                            "app": "nginx-ingress",
                            "component": "default-backend",
                            "release": "nginx-ingress"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:Deployment::nginx-ingress-default-backend",
                "custom": true,
                "id": "default/nginx-ingress-default-backend",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "default-backend",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-default-backend"
                    },
                    "spec": {
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "nginx-ingress",
                                "release": "nginx-ingress"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "nginx-ingress",
                                    "component": "default-backend",
                                    "release": "nginx-ingress"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "nginx-ingress-default-backend",
                                        "ports": [
                                            {
                                                "containerPort": 8080,
                                                "name": "http",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 6,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 0,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsUser": 65534
                                        }
                                    }
                                ],
                                "serviceAccountName": "nginx-ingress-backend",
                                "terminationGracePeriodSeconds": 60
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "component": "default-backend",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress-default-backend"
                        },
                        "spec": {
                            "replicas": 1,
                            "revisionHistoryLimit": 10,
                            "selector": {
                                "matchLabels": {
                                    "app": "nginx-ingress",
                                    "release": "nginx-ingress"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "nginx-ingress",
                                        "component": "default-backend",
                                        "release": "nginx-ingress"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "failureThreshold": 3,
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8080,
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 30,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "nginx-ingress-default-backend",
                                            "ports": [
                                                {
                                                    "containerPort": 8080,
                                                    "name": "http",
                                                    "protocol": "TCP"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "failureThreshold": 6,
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 8080,
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 0,
                                                "periodSeconds": 5,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "resources": {},
                                            "securityContext": {
                                                "runAsUser": 65534
                                            }
                                        }
                                    ],
                                    "serviceAccountName": "nginx-ingress-backend",
                                    "terminationGracePeriodSeconds": 60
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"component\":\"default-backend\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress-default-backend\"},\"spec\":{\"replicas\":1,\"revisionHistoryLimit\":10,\"selector\":{\"matchLabels\":{\"app\":\"nginx-ingress\",\"release\":\"nginx-ingress\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"component\":\"default-backend\",\"release\":\"nginx-ingress\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/defaultbackend-amd64:1.5\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":8080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"nginx-ingress-default-backend\",\"ports\":[{\"containerPort\":8080,\"name\":\"http\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":6,\"httpGet\":{\"path\":\"/healthz\",\"port\":8080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":0,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":5},\"resources\":{},\"securityContext\":{\"runAsUser\":65534}}],\"serviceAccountName\":\"nginx-ingress-backend\",\"terminationGracePeriodSeconds\":60}}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "generation": 1,
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "default-backend",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-default-backend",
                        "namespace": "default",
                        "resourceVersion": "4235",
                        "selfLink": "/apis/apps/v1/namespaces/default/deployments/nginx-ingress-default-backend",
                        "uid": "07922286-93d2-4ec8-bcd3-6a7d06279d0d"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "nginx-ingress",
                                "release": "nginx-ingress"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "nginx-ingress",
                                    "component": "default-backend",
                                    "release": "nginx-ingress"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "nginx-ingress-default-backend",
                                        "ports": [
                                            {
                                                "containerPort": 8080,
                                                "name": "http",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 6,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 8080,
                                                "scheme": "HTTP"
                                            },
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsUser": 65534
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "nginx-ingress-backend",
                                "serviceAccountName": "nginx-ingress-backend",
                                "terminationGracePeriodSeconds": 60
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2020-05-18T08:33:07Z",
                                "lastUpdateTime": "2020-05-18T08:33:07Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2020-05-18T08:32:56Z",
                                "lastUpdateTime": "2020-05-18T08:33:07Z",
                                "message": "ReplicaSet \"nginx-ingress-default-backend-576b86996d\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:Deployment::nginx-ingress-default-backend",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:Deployment::nginx-ingress-default-backend",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:extensions/v1beta1:Deployment::nginx-ingress-default-backend"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:PersistentVolumeClaim::default/mongodb",
                "custom": true,
                "id": "default/mongodb",
                "type": "kubernetes:core/v1:PersistentVolumeClaim",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "PersistentVolumeClaim",
                    "metadata": {
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default"
                    },
                    "spec": {
                        "accessModes": [
                            "ReadWriteOnce"
                        ],
                        "resources": {
                            "requests": {
                                "storage": "8Gi"
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "PersistentVolumeClaim",
                        "metadata": {
                            "labels": {
                                "app": "mongodb",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "mongodb-7.14.1",
                                "heritage": "Helm",
                                "release": "mongodb"
                            },
                            "name": "mongodb",
                            "namespace": "default"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "8Gi"
                                }
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "PersistentVolumeClaim",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"PersistentVolumeClaim\",\"metadata\":{\"labels\":{\"app\":\"mongodb\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"mongodb-7.14.1\",\"heritage\":\"Helm\",\"release\":\"mongodb\"},\"name\":\"mongodb\",\"namespace\":\"default\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"8Gi\"}}}}\n",
                            "pv.kubernetes.io/bind-completed": "yes",
                            "pv.kubernetes.io/bound-by-controller": "yes",
                            "volume.beta.kubernetes.io/storage-provisioner": "kubernetes.io/azure-disk"
                        },
                        "creationTimestamp": "2020-05-18T08:33:05Z",
                        "finalizers": [
                            "kubernetes.io/pvc-protection"
                        ],
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default",
                        "resourceVersion": "4293",
                        "selfLink": "/api/v1/namespaces/default/persistentvolumeclaims/mongodb",
                        "uid": "0b10e33f-83f9-4963-8ace-5ba2306628aa"
                    },
                    "spec": {
                        "accessModes": [
                            "ReadWriteOnce"
                        ],
                        "resources": {
                            "requests": {
                                "storage": "8Gi"
                            }
                        },
                        "storageClassName": "default",
                        "volumeMode": "Filesystem",
                        "volumeName": "pvc-0b10e33f-83f9-4963-8ace-5ba2306628aa"
                    },
                    "status": {
                        "accessModes": [
                            "ReadWriteOnce"
                        ],
                        "capacity": {
                            "storage": "8Gi"
                        },
                        "phase": "Bound"
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:Deployment::nginx-ingress-controller",
                "custom": true,
                "id": "default/nginx-ingress-controller",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {},
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "controller",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-controller"
                    },
                    "spec": {
                        "minReadySeconds": 0,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "nginx-ingress",
                                "release": "nginx-ingress"
                            }
                        },
                        "strategy": {},
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "nginx-ingress",
                                    "component": "controller",
                                    "release": "nginx-ingress"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "/nginx-ingress-controller",
                                            "--default-backend-service=default/nginx-ingress-default-backend",
                                            "--publish-service=default/nginx-ingress-controller",
                                            "--election-id=ingress-controller-leader",
                                            "--ingress-class=nginx",
                                            "--configmap=default/nginx-ingress-controller",
                                            "--watch-namespace=default"
                                        ],
                                        "env": [
                                            {
                                                "name": "POD_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "POD_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 10254,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "nginx-ingress-controller",
                                        "ports": [
                                            {
                                                "containerPort": 80,
                                                "name": "http",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 443,
                                                "name": "https",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 10254,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": true,
                                            "capabilities": {
                                                "add": [
                                                    "NET_BIND_SERVICE"
                                                ],
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "runAsUser": 33
                                        }
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "hostNetwork": false,
                                "serviceAccountName": "nginx-ingress",
                                "terminationGracePeriodSeconds": 60
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "annotations": {},
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "component": "controller",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress-controller"
                        },
                        "spec": {
                            "minReadySeconds": 0,
                            "replicas": 1,
                            "revisionHistoryLimit": 10,
                            "selector": {
                                "matchLabels": {
                                    "app": "nginx-ingress",
                                    "release": "nginx-ingress"
                                }
                            },
                            "strategy": {},
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "nginx-ingress",
                                        "component": "controller",
                                        "release": "nginx-ingress"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "/nginx-ingress-controller",
                                                "--default-backend-service=default/nginx-ingress-default-backend",
                                                "--publish-service=default/nginx-ingress-controller",
                                                "--election-id=ingress-controller-leader",
                                                "--ingress-class=nginx",
                                                "--configmap=default/nginx-ingress-controller",
                                                "--watch-namespace=default"
                                            ],
                                            "env": [
                                                {
                                                    "name": "POD_NAME",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.name"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "POD_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "failureThreshold": 3,
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 10254,
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 1
                                            },
                                            "name": "nginx-ingress-controller",
                                            "ports": [
                                                {
                                                    "containerPort": 80,
                                                    "name": "http",
                                                    "protocol": "TCP"
                                                },
                                                {
                                                    "containerPort": 443,
                                                    "name": "https",
                                                    "protocol": "TCP"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "failureThreshold": 3,
                                                "httpGet": {
                                                    "path": "/healthz",
                                                    "port": 10254,
                                                    "scheme": "HTTP"
                                                },
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 1
                                            },
                                            "resources": {},
                                            "securityContext": {
                                                "allowPrivilegeEscalation": true,
                                                "capabilities": {
                                                    "add": [
                                                        "NET_BIND_SERVICE"
                                                    ],
                                                    "drop": [
                                                        "ALL"
                                                    ]
                                                },
                                                "runAsUser": 33
                                            }
                                        }
                                    ],
                                    "dnsPolicy": "ClusterFirst",
                                    "hostNetwork": false,
                                    "serviceAccountName": "nginx-ingress",
                                    "terminationGracePeriodSeconds": 60
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"component\":\"controller\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress-controller\"},\"spec\":{\"minReadySeconds\":0,\"replicas\":1,\"revisionHistoryLimit\":10,\"selector\":{\"matchLabels\":{\"app\":\"nginx-ingress\",\"release\":\"nginx-ingress\"}},\"strategy\":{},\"template\":{\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"component\":\"controller\",\"release\":\"nginx-ingress\"}},\"spec\":{\"containers\":[{\"args\":[\"/nginx-ingress-controller\",\"--default-backend-service=default/nginx-ingress-default-backend\",\"--publish-service=default/nginx-ingress-controller\",\"--election-id=ingress-controller-leader\",\"--ingress-class=nginx\",\"--configmap=default/nginx-ingress-controller\",\"--watch-namespace=default\"],\"env\":[{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":10254,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"name\":\"nginx-ingress-controller\",\"ports\":[{\"containerPort\":80,\"name\":\"http\",\"protocol\":\"TCP\"},{\"containerPort\":443,\"name\":\"https\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"failureThreshold\":3,\"httpGet\":{\"path\":\"/healthz\",\"port\":10254,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"resources\":{},\"securityContext\":{\"allowPrivilegeEscalation\":true,\"capabilities\":{\"add\":[\"NET_BIND_SERVICE\"],\"drop\":[\"ALL\"]},\"runAsUser\":33}}],\"dnsPolicy\":\"ClusterFirst\",\"hostNetwork\":false,\"serviceAccountName\":\"nginx-ingress\",\"terminationGracePeriodSeconds\":60}}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:57Z",
                        "generation": 1,
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "controller",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-controller",
                        "namespace": "default",
                        "resourceVersion": "4381",
                        "selfLink": "/apis/apps/v1/namespaces/default/deployments/nginx-ingress-controller",
                        "uid": "ef532383-87f4-48cf-b1f8-301b32e79186"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "nginx-ingress",
                                "release": "nginx-ingress"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "nginx-ingress",
                                    "component": "controller",
                                    "release": "nginx-ingress"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "/nginx-ingress-controller",
                                            "--default-backend-service=default/nginx-ingress-default-backend",
                                            "--publish-service=default/nginx-ingress-controller",
                                            "--election-id=ingress-controller-leader",
                                            "--ingress-class=nginx",
                                            "--configmap=default/nginx-ingress-controller",
                                            "--watch-namespace=default"
                                        ],
                                        "env": [
                                            {
                                                "name": "POD_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "POD_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 10254,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "name": "nginx-ingress-controller",
                                        "ports": [
                                            {
                                                "containerPort": 80,
                                                "name": "http",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 443,
                                                "name": "https",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "failureThreshold": 3,
                                            "httpGet": {
                                                "path": "/healthz",
                                                "port": 10254,
                                                "scheme": "HTTP"
                                            },
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "allowPrivilegeEscalation": true,
                                            "capabilities": {
                                                "add": [
                                                    "NET_BIND_SERVICE"
                                                ],
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "runAsUser": 33
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "serviceAccount": "nginx-ingress",
                                "serviceAccountName": "nginx-ingress",
                                "terminationGracePeriodSeconds": 60
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2020-05-18T08:33:45Z",
                                "lastUpdateTime": "2020-05-18T08:33:45Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2020-05-18T08:32:57Z",
                                "lastUpdateTime": "2020-05-18T08:33:45Z",
                                "message": "ReplicaSet \"nginx-ingress-controller-569dcf6684\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:Deployment::nginx-ingress-controller",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:Deployment::nginx-ingress-controller",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:extensions/v1beta1:Deployment::nginx-ingress-controller"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::nginx-ingress-controller",
                "custom": true,
                "id": "default/nginx-ingress-controller",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "controller",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-controller"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "http"
                            },
                            {
                                "name": "https",
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": "https"
                            }
                        ],
                        "selector": {
                            "app": "nginx-ingress",
                            "component": "controller",
                            "release": "nginx-ingress"
                        },
                        "type": "LoadBalancer"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "nginx-ingress",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "nginx-ingress-1.27.1",
                                "component": "controller",
                                "heritage": "Helm",
                                "release": "nginx-ingress"
                            },
                            "name": "nginx-ingress-controller"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 80,
                                    "protocol": "TCP",
                                    "targetPort": "http"
                                },
                                {
                                    "name": "https",
                                    "port": 443,
                                    "protocol": "TCP",
                                    "targetPort": "https"
                                }
                            ],
                            "selector": {
                                "app": "nginx-ingress",
                                "component": "controller",
                                "release": "nginx-ingress"
                            },
                            "type": "LoadBalancer"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"nginx-ingress\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"nginx-ingress-1.27.1\",\"component\":\"controller\",\"heritage\":\"Helm\",\"release\":\"nginx-ingress\"},\"name\":\"nginx-ingress-controller\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":\"http\"},{\"name\":\"https\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":\"https\"}],\"selector\":{\"app\":\"nginx-ingress\",\"component\":\"controller\",\"release\":\"nginx-ingress\"},\"type\":\"LoadBalancer\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "labels": {
                            "app": "nginx-ingress",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "nginx-ingress-1.27.1",
                            "component": "controller",
                            "heritage": "Helm",
                            "release": "nginx-ingress"
                        },
                        "name": "nginx-ingress-controller",
                        "namespace": "default",
                        "resourceVersion": "4575",
                        "selfLink": "/api/v1/namespaces/default/services/nginx-ingress-controller",
                        "uid": "1bf3e0f6-d410-4aef-a73f-2fb08fda76c0"
                    },
                    "spec": {
                        "clusterIP": "10.0.39.222",
                        "externalTrafficPolicy": "Cluster",
                        "ports": [
                            {
                                "name": "http",
                                "nodePort": 32684,
                                "port": 80,
                                "protocol": "TCP",
                                "targetPort": "http"
                            },
                            {
                                "name": "https",
                                "nodePort": 30618,
                                "port": 443,
                                "protocol": "TCP",
                                "targetPort": "https"
                            }
                        ],
                        "selector": {
                            "app": "nginx-ingress",
                            "component": "controller",
                            "release": "nginx-ingress"
                        },
                        "sessionAffinity": "None",
                        "type": "LoadBalancer"
                    },
                    "status": {
                        "loadBalancer": {
                            "ingress": [
                                {
                                    "ip": "52.230.31.248"
                                }
                            ]
                        }
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::nginx-ingress",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::elasticsearch-master-headless",
                "custom": true,
                "id": "default/elasticsearch-master-headless",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
                        },
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master-headless"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "http",
                                "port": 9200
                            },
                            {
                                "name": "transport",
                                "port": 9300
                            }
                        ],
                        "publishNotReadyAddresses": true,
                        "selector": {
                            "app": "elasticsearch-master"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "annotations": {
                                "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
                            },
                            "labels": {
                                "app": "elasticsearch-master",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "elasticsearch",
                                "heritage": "Helm",
                                "release": "elasticsearch"
                            },
                            "name": "elasticsearch-master-headless"
                        },
                        "spec": {
                            "clusterIP": "None",
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 9200
                                },
                                {
                                    "name": "transport",
                                    "port": 9300
                                }
                            ],
                            "publishNotReadyAddresses": true,
                            "selector": {
                                "app": "elasticsearch-master"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"service.alpha.kubernetes.io/tolerate-unready-endpoints\":\"true\"},\"labels\":{\"app\":\"elasticsearch-master\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"elasticsearch\",\"heritage\":\"Helm\",\"release\":\"elasticsearch\"},\"name\":\"elasticsearch-master-headless\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"http\",\"port\":9200},{\"name\":\"transport\",\"port\":9300}],\"publishNotReadyAddresses\":true,\"selector\":{\"app\":\"elasticsearch-master\"}}}\n",
                            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
                        },
                        "creationTimestamp": "2020-05-18T08:33:04Z",
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master-headless",
                        "namespace": "default",
                        "resourceVersion": "4162",
                        "selfLink": "/api/v1/namespaces/default/services/elasticsearch-master-headless",
                        "uid": "95b7f44e-6b28-4d87-9498-59e22008fa2e"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "http",
                                "port": 9200,
                                "protocol": "TCP",
                                "targetPort": 9200
                            },
                            {
                                "name": "transport",
                                "port": 9300,
                                "protocol": "TCP",
                                "targetPort": 9300
                            }
                        ],
                        "publishNotReadyAddresses": true,
                        "selector": {
                            "app": "elasticsearch-master"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::elasticsearch-master",
                "custom": true,
                "id": "default/elasticsearch-master",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {},
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "http",
                                "port": 9200,
                                "protocol": "TCP"
                            },
                            {
                                "name": "transport",
                                "port": 9300,
                                "protocol": "TCP"
                            }
                        ],
                        "selector": {
                            "app": "elasticsearch-master",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "annotations": {},
                            "labels": {
                                "app": "elasticsearch-master",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "elasticsearch",
                                "heritage": "Helm",
                                "release": "elasticsearch"
                            },
                            "name": "elasticsearch-master"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "http",
                                    "port": 9200,
                                    "protocol": "TCP"
                                },
                                {
                                    "name": "transport",
                                    "port": 9300,
                                    "protocol": "TCP"
                                }
                            ],
                            "selector": {
                                "app": "elasticsearch-master",
                                "chart": "elasticsearch",
                                "heritage": "Helm",
                                "release": "elasticsearch"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"elasticsearch-master\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"elasticsearch\",\"heritage\":\"Helm\",\"release\":\"elasticsearch\"},\"name\":\"elasticsearch-master\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":9200,\"protocol\":\"TCP\"},{\"name\":\"transport\",\"port\":9300,\"protocol\":\"TCP\"}],\"selector\":{\"app\":\"elasticsearch-master\",\"chart\":\"elasticsearch\",\"heritage\":\"Helm\",\"release\":\"elasticsearch\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:04Z",
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master",
                        "namespace": "default",
                        "resourceVersion": "4167",
                        "selfLink": "/api/v1/namespaces/default/services/elasticsearch-master",
                        "uid": "0a02de8a-477e-4d5b-8656-fa6f5c39eb27"
                    },
                    "spec": {
                        "clusterIP": "10.0.58.24",
                        "ports": [
                            {
                                "name": "http",
                                "port": 9200,
                                "protocol": "TCP",
                                "targetPort": 9200
                            },
                            {
                                "name": "transport",
                                "port": 9300,
                                "protocol": "TCP",
                                "targetPort": 9300
                            }
                        ],
                        "selector": {
                            "app": "elasticsearch-master",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/mongodb",
                "custom": true,
                "id": "default/mongodb",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "mongodb",
                                "port": 27017,
                                "targetPort": "mongodb"
                            }
                        ],
                        "selector": {
                            "app": "mongodb",
                            "release": "mongodb"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "mongodb",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "mongodb-7.14.1",
                                "heritage": "Helm",
                                "release": "mongodb"
                            },
                            "name": "mongodb",
                            "namespace": "default"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "mongodb",
                                    "port": 27017,
                                    "targetPort": "mongodb"
                                }
                            ],
                            "selector": {
                                "app": "mongodb",
                                "release": "mongodb"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"mongodb\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"mongodb-7.14.1\",\"heritage\":\"Helm\",\"release\":\"mongodb\"},\"name\":\"mongodb\",\"namespace\":\"default\"},\"spec\":{\"ports\":[{\"name\":\"mongodb\",\"port\":27017,\"targetPort\":\"mongodb\"}],\"selector\":{\"app\":\"mongodb\",\"release\":\"mongodb\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:05Z",
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default",
                        "resourceVersion": "4205",
                        "selfLink": "/api/v1/namespaces/default/services/mongodb",
                        "uid": "78b89d4d-b627-4232-9686-0cd5c8f58e8b"
                    },
                    "spec": {
                        "clusterIP": "10.0.181.239",
                        "ports": [
                            {
                                "name": "mongodb",
                                "port": 27017,
                                "protocol": "TCP",
                                "targetPort": "mongodb"
                            }
                        ],
                        "selector": {
                            "app": "mongodb",
                            "release": "mongodb"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:Deployment::default/mongodb",
                "custom": true,
                "id": "default/mongodb",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app": "mongodb",
                                "release": "mongodb"
                            }
                        },
                        "strategy": {
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "mongodb",
                                    "chart": "mongodb-7.14.1",
                                    "release": "mongodb"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "MONGODB_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "mongodb-password",
                                                        "name": "mongodb"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MONGODB_ROOT_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "mongodb-root-password",
                                                        "name": "mongodb"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MONGODB_USERNAME",
                                                "value": "user"
                                            },
                                            {
                                                "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                                                "value": "0"
                                            },
                                            {
                                                "name": "MONGODB_DISABLE_SYSTEM_LOG",
                                                "value": "no"
                                            },
                                            {
                                                "name": "MONGODB_DATABASE",
                                                "value": "MsDemo_Blogging"
                                            },
                                            {
                                                "name": "MONGODB_ENABLE_IPV6",
                                                "value": "no"
                                            },
                                            {
                                                "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                                                "value": "no"
                                            }
                                        ],
                                        "image": "docker.io/bitnami/mongodb:4.2.6-debian-10-r34",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "mongo",
                                                    "--eval",
                                                    "db.adminCommand('ping')"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "mongodb",
                                        "ports": [
                                            {
                                                "containerPort": 27017,
                                                "name": "mongodb"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "mongo",
                                                    "--eval",
                                                    "db.adminCommand('ping')"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsNonRoot": true,
                                            "runAsUser": 1001
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/bitnami/mongodb",
                                                "name": "data"
                                            }
                                        ]
                                    }
                                ],
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccountName": "mongodb",
                                "volumes": [
                                    {
                                        "name": "data",
                                        "persistentVolumeClaim": {
                                            "claimName": "mongodb"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app": "mongodb",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "mongodb-7.14.1",
                                "heritage": "Helm",
                                "release": "mongodb"
                            },
                            "name": "mongodb",
                            "namespace": "default"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app": "mongodb",
                                    "release": "mongodb"
                                }
                            },
                            "strategy": {
                                "type": "RollingUpdate"
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "mongodb",
                                        "chart": "mongodb-7.14.1",
                                        "release": "mongodb"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "env": [
                                                {
                                                    "name": "MONGODB_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "mongodb-password",
                                                            "name": "mongodb"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "MONGODB_ROOT_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "mongodb-root-password",
                                                            "name": "mongodb"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "MONGODB_USERNAME",
                                                    "value": "user"
                                                },
                                                {
                                                    "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                                                    "value": "0"
                                                },
                                                {
                                                    "name": "MONGODB_DISABLE_SYSTEM_LOG",
                                                    "value": "no"
                                                },
                                                {
                                                    "name": "MONGODB_DATABASE",
                                                    "value": "MsDemo_Blogging"
                                                },
                                                {
                                                    "name": "MONGODB_ENABLE_IPV6",
                                                    "value": "no"
                                                },
                                                {
                                                    "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                                                    "value": "no"
                                                }
                                            ],
                                            "image": "docker.io/bitnami/mongodb:4.2.6-debian-10-r34",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "mongo",
                                                        "--eval",
                                                        "db.adminCommand('ping')"
                                                    ]
                                                },
                                                "failureThreshold": 6,
                                                "initialDelaySeconds": 30,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "mongodb",
                                            "ports": [
                                                {
                                                    "containerPort": 27017,
                                                    "name": "mongodb"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "mongo",
                                                        "--eval",
                                                        "db.adminCommand('ping')"
                                                    ]
                                                },
                                                "failureThreshold": 6,
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "resources": {},
                                            "securityContext": {
                                                "runAsNonRoot": true,
                                                "runAsUser": 1001
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/bitnami/mongodb",
                                                    "name": "data"
                                                }
                                            ]
                                        }
                                    ],
                                    "securityContext": {
                                        "fsGroup": 1001
                                    },
                                    "serviceAccountName": "mongodb",
                                    "volumes": [
                                        {
                                            "name": "data",
                                            "persistentVolumeClaim": {
                                                "claimName": "mongodb"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app\":\"mongodb\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"mongodb-7.14.1\",\"heritage\":\"Helm\",\"release\":\"mongodb\"},\"name\":\"mongodb\",\"namespace\":\"default\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app\":\"mongodb\",\"release\":\"mongodb\"}},\"strategy\":{\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"labels\":{\"app\":\"mongodb\",\"chart\":\"mongodb-7.14.1\",\"release\":\"mongodb\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"MONGODB_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"mongodb-password\",\"name\":\"mongodb\"}}},{\"name\":\"MONGODB_ROOT_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"mongodb-root-password\",\"name\":\"mongodb\"}}},{\"name\":\"MONGODB_USERNAME\",\"value\":\"user\"},{\"name\":\"MONGODB_SYSTEM_LOG_VERBOSITY\",\"value\":\"0\"},{\"name\":\"MONGODB_DISABLE_SYSTEM_LOG\",\"value\":\"no\"},{\"name\":\"MONGODB_DATABASE\",\"value\":\"MsDemo_Blogging\"},{\"name\":\"MONGODB_ENABLE_IPV6\",\"value\":\"no\"},{\"name\":\"MONGODB_ENABLE_DIRECTORY_PER_DB\",\"value\":\"no\"}],\"image\":\"docker.io/bitnami/mongodb:4.2.6-debian-10-r34\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"exec\":{\"command\":[\"mongo\",\"--eval\",\"db.adminCommand('ping')\"]},\"failureThreshold\":6,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"mongodb\",\"ports\":[{\"containerPort\":27017,\"name\":\"mongodb\"}],\"readinessProbe\":{\"exec\":{\"command\":[\"mongo\",\"--eval\",\"db.adminCommand('ping')\"]},\"failureThreshold\":6,\"initialDelaySeconds\":5,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"resources\":{},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":1001},\"volumeMounts\":[{\"mountPath\":\"/bitnami/mongodb\",\"name\":\"data\"}]}],\"securityContext\":{\"fsGroup\":1001},\"serviceAccountName\":\"mongodb\",\"volumes\":[{\"name\":\"data\",\"persistentVolumeClaim\":{\"claimName\":\"mongodb\"}}]}}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:06Z",
                        "generation": 1,
                        "labels": {
                            "app": "mongodb",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "mongodb-7.14.1",
                            "heritage": "Helm",
                            "release": "mongodb"
                        },
                        "name": "mongodb",
                        "namespace": "default",
                        "resourceVersion": "4727",
                        "selfLink": "/apis/apps/v1/namespaces/default/deployments/mongodb",
                        "uid": "8627e930-06b8-4108-8ae2-da3561a4dd62"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "mongodb",
                                "release": "mongodb"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "mongodb",
                                    "chart": "mongodb-7.14.1",
                                    "release": "mongodb"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "MONGODB_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "mongodb-password",
                                                        "name": "mongodb"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MONGODB_ROOT_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "mongodb-root-password",
                                                        "name": "mongodb"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MONGODB_USERNAME",
                                                "value": "user"
                                            },
                                            {
                                                "name": "MONGODB_SYSTEM_LOG_VERBOSITY",
                                                "value": "0"
                                            },
                                            {
                                                "name": "MONGODB_DISABLE_SYSTEM_LOG",
                                                "value": "no"
                                            },
                                            {
                                                "name": "MONGODB_DATABASE",
                                                "value": "MsDemo_Blogging"
                                            },
                                            {
                                                "name": "MONGODB_ENABLE_IPV6",
                                                "value": "no"
                                            },
                                            {
                                                "name": "MONGODB_ENABLE_DIRECTORY_PER_DB",
                                                "value": "no"
                                            }
                                        ],
                                        "image": "docker.io/bitnami/mongodb:4.2.6-debian-10-r34",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "mongo",
                                                    "--eval",
                                                    "db.adminCommand('ping')"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "mongodb",
                                        "ports": [
                                            {
                                                "containerPort": 27017,
                                                "name": "mongodb",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "mongo",
                                                    "--eval",
                                                    "db.adminCommand('ping')"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsNonRoot": true,
                                            "runAsUser": 1001
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/bitnami/mongodb",
                                                "name": "data"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccount": "mongodb",
                                "serviceAccountName": "mongodb",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "name": "data",
                                        "persistentVolumeClaim": {
                                            "claimName": "mongodb"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "availableReplicas": 1,
                        "conditions": [
                            {
                                "lastTransitionTime": "2020-05-18T08:36:37Z",
                                "lastUpdateTime": "2020-05-18T08:36:37Z",
                                "message": "Deployment has minimum availability.",
                                "reason": "MinimumReplicasAvailable",
                                "status": "True",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2020-05-18T08:33:06Z",
                                "lastUpdateTime": "2020-05-18T08:36:37Z",
                                "message": "ReplicaSet \"mongodb-78686d685b\" has successfully progressed.",
                                "reason": "NewReplicaSetAvailable",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::mongodb",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:Deployment::default/mongodb",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:Deployment::default/mongodb",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:extensions/v1beta1:Deployment::default/mongodb"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/redis-slave",
                "custom": true,
                "id": "default/redis-slave",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-slave",
                        "namespace": "default"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis",
                            "role": "slave"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-slave",
                            "namespace": "default"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "redis",
                                    "port": 6379,
                                    "targetPort": "redis"
                                }
                            ],
                            "selector": {
                                "app": "redis",
                                "release": "redis",
                                "role": "slave"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-slave\",\"namespace\":\"default\"},\"spec\":{\"ports\":[{\"name\":\"redis\",\"port\":6379,\"targetPort\":\"redis\"}],\"selector\":{\"app\":\"redis\",\"release\":\"redis\",\"role\":\"slave\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:59Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-slave",
                        "namespace": "default",
                        "resourceVersion": "4091",
                        "selfLink": "/api/v1/namespaces/default/services/redis-slave",
                        "uid": "f7c990e3-2847-49f2-8151-96a7177d0dbc"
                    },
                    "spec": {
                        "clusterIP": "10.0.135.146",
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "protocol": "TCP",
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis",
                            "role": "slave"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/redis-headless",
                "custom": true,
                "id": "default/redis-headless",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-headless",
                        "namespace": "default"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-headless",
                            "namespace": "default"
                        },
                        "spec": {
                            "clusterIP": "None",
                            "ports": [
                                {
                                    "name": "redis",
                                    "port": 6379,
                                    "targetPort": "redis"
                                }
                            ],
                            "selector": {
                                "app": "redis",
                                "release": "redis"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-headless\",\"namespace\":\"default\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"redis\",\"port\":6379,\"targetPort\":\"redis\"}],\"selector\":{\"app\":\"redis\",\"release\":\"redis\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:59Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-headless",
                        "namespace": "default",
                        "resourceVersion": "4088",
                        "selfLink": "/api/v1/namespaces/default/services/redis-headless",
                        "uid": "61a719ae-1747-4a31-842c-e01abaef5438"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "protocol": "TCP",
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/rabbitmq-headless",
                "custom": true,
                "id": "default/rabbitmq-headless",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-headless",
                        "namespace": "default"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "epmd",
                                "port": 4369,
                                "targetPort": "epmd"
                            },
                            {
                                "name": "amqp",
                                "port": 5672,
                                "targetPort": "amqp"
                            },
                            {
                                "name": "dist",
                                "port": 25672,
                                "targetPort": "dist"
                            },
                            {
                                "name": "stats",
                                "port": 15672,
                                "targetPort": "stats"
                            }
                        ],
                        "selector": {
                            "app": "rabbitmq",
                            "release": "rabbitmq"
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq-headless",
                            "namespace": "default"
                        },
                        "spec": {
                            "clusterIP": "None",
                            "ports": [
                                {
                                    "name": "epmd",
                                    "port": 4369,
                                    "targetPort": "epmd"
                                },
                                {
                                    "name": "amqp",
                                    "port": 5672,
                                    "targetPort": "amqp"
                                },
                                {
                                    "name": "dist",
                                    "port": 25672,
                                    "targetPort": "dist"
                                },
                                {
                                    "name": "stats",
                                    "port": 15672,
                                    "targetPort": "stats"
                                }
                            ],
                            "selector": {
                                "app": "rabbitmq",
                                "release": "rabbitmq"
                            }
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq-headless\",\"namespace\":\"default\"},\"spec\":{\"clusterIP\":\"None\",\"ports\":[{\"name\":\"epmd\",\"port\":4369,\"targetPort\":\"epmd\"},{\"name\":\"amqp\",\"port\":5672,\"targetPort\":\"amqp\"},{\"name\":\"dist\",\"port\":25672,\"targetPort\":\"dist\"},{\"name\":\"stats\",\"port\":15672,\"targetPort\":\"stats\"}],\"selector\":{\"app\":\"rabbitmq\",\"release\":\"rabbitmq\"}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:01Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq-headless",
                        "namespace": "default",
                        "resourceVersion": "4126",
                        "selfLink": "/api/v1/namespaces/default/services/rabbitmq-headless",
                        "uid": "2be5758b-27ef-4969-a8b8-67fe035dc66d"
                    },
                    "spec": {
                        "clusterIP": "None",
                        "ports": [
                            {
                                "name": "epmd",
                                "port": 4369,
                                "protocol": "TCP",
                                "targetPort": "epmd"
                            },
                            {
                                "name": "amqp",
                                "port": 5672,
                                "protocol": "TCP",
                                "targetPort": "amqp"
                            },
                            {
                                "name": "dist",
                                "port": 25672,
                                "protocol": "TCP",
                                "targetPort": "dist"
                            },
                            {
                                "name": "stats",
                                "port": 15672,
                                "protocol": "TCP",
                                "targetPort": "stats"
                            }
                        ],
                        "selector": {
                            "app": "rabbitmq",
                            "release": "rabbitmq"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/rabbitmq",
                "custom": true,
                "id": "default/rabbitmq",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "epmd",
                                "port": 4369,
                                "targetPort": "epmd"
                            },
                            {
                                "name": "amqp",
                                "port": 5672,
                                "targetPort": "amqp"
                            },
                            {
                                "name": "dist",
                                "port": 25672,
                                "targetPort": "dist"
                            },
                            {
                                "name": "stats",
                                "port": 15672,
                                "targetPort": "stats"
                            }
                        ],
                        "selector": {
                            "app": "rabbitmq",
                            "release": "rabbitmq"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq",
                            "namespace": "default"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "epmd",
                                    "port": 4369,
                                    "targetPort": "epmd"
                                },
                                {
                                    "name": "amqp",
                                    "port": 5672,
                                    "targetPort": "amqp"
                                },
                                {
                                    "name": "dist",
                                    "port": 25672,
                                    "targetPort": "dist"
                                },
                                {
                                    "name": "stats",
                                    "port": 15672,
                                    "targetPort": "stats"
                                }
                            ],
                            "selector": {
                                "app": "rabbitmq",
                                "release": "rabbitmq"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq\",\"namespace\":\"default\"},\"spec\":{\"ports\":[{\"name\":\"epmd\",\"port\":4369,\"targetPort\":\"epmd\"},{\"name\":\"amqp\",\"port\":5672,\"targetPort\":\"amqp\"},{\"name\":\"dist\",\"port\":25672,\"targetPort\":\"dist\"},{\"name\":\"stats\",\"port\":15672,\"targetPort\":\"stats\"}],\"selector\":{\"app\":\"rabbitmq\",\"release\":\"rabbitmq\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:01Z",
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default",
                        "resourceVersion": "4136",
                        "selfLink": "/api/v1/namespaces/default/services/rabbitmq",
                        "uid": "cfcacec6-1523-47a0-b387-e209b52b9562"
                    },
                    "spec": {
                        "clusterIP": "10.0.192.30",
                        "ports": [
                            {
                                "name": "epmd",
                                "port": 4369,
                                "protocol": "TCP",
                                "targetPort": "epmd"
                            },
                            {
                                "name": "amqp",
                                "port": 5672,
                                "protocol": "TCP",
                                "targetPort": "amqp"
                            },
                            {
                                "name": "dist",
                                "port": 25672,
                                "protocol": "TCP",
                                "targetPort": "dist"
                            },
                            {
                                "name": "stats",
                                "port": 15672,
                                "protocol": "TCP",
                                "targetPort": "stats"
                            }
                        ],
                        "selector": {
                            "app": "rabbitmq",
                            "release": "rabbitmq"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:StatefulSet::default/rabbitmq",
                "custom": true,
                "id": "default/rabbitmq",
                "type": "kubernetes:apps/v1:StatefulSet",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default"
                    },
                    "spec": {
                        "podManagementPolicy": "OrderedReady",
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app": "rabbitmq",
                                "release": "rabbitmq"
                            }
                        },
                        "serviceName": "rabbitmq-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/secret": "00ea58ebecb35675763d6d2512c1c7796be55d5a982ecf9462fea0566611644b"
                                },
                                "labels": {
                                    "app": "rabbitmq",
                                    "chart": "rabbitmq-6.25.12",
                                    "release": "rabbitmq"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "bash",
                                            "-ec",
                                            "mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\n#persist the erlang cookie in both places for server and cli tools\necho $RABBITMQ_ERL_COOKIE \u003e /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\n#change permission so only the user has access to the cookie file\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\n#copy the mounted configuration to both places\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\n# Apply resources limits\nulimit -n \"${RABBITMQ_ULIMIT_NOFILES}\"\n#replace the default password that is generated\nsed -i \"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\/\\\\\\\\}\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\nexec rabbitmq-server\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "BITNAMI_DEBUG",
                                                "value": "false"
                                            },
                                            {
                                                "name": "MY_POD_IP",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "status.podIP"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MY_POD_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MY_POD_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "K8S_SERVICE_NAME",
                                                "value": "rabbitmq-headless"
                                            },
                                            {
                                                "name": "K8S_ADDRESS_TYPE",
                                                "value": "hostname"
                                            },
                                            {
                                                "name": "RABBITMQ_NODENAME",
                                                "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                            },
                                            {
                                                "name": "K8S_HOSTNAME_SUFFIX",
                                                "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                            },
                                            {
                                                "name": "RABBITMQ_LOGS",
                                                "value": "-"
                                            },
                                            {
                                                "name": "RABBITMQ_ULIMIT_NOFILES",
                                                "value": "65536"
                                            },
                                            {
                                                "name": "RABBITMQ_USE_LONGNAME",
                                                "value": "true"
                                            },
                                            {
                                                "name": "RABBITMQ_ERL_COOKIE",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "rabbitmq-erlang-cookie",
                                                        "name": "rabbitmq"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "RABBITMQ_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "rabbitmq-password",
                                                        "name": "rabbitmq"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "docker.io/bitnami/rabbitmq:3.8.3-debian-10-r84",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "rabbitmq-api-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 120,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 20
                                        },
                                        "name": "rabbitmq",
                                        "ports": [
                                            {
                                                "containerPort": 4369,
                                                "name": "epmd"
                                            },
                                            {
                                                "containerPort": 5672,
                                                "name": "amqp"
                                            },
                                            {
                                                "containerPort": 25672,
                                                "name": "dist"
                                            },
                                            {
                                                "containerPort": 15672,
                                                "name": "stats"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "rabbitmq-health-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                ]
                                            },
                                            "failureThreshold": 3,
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 20
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/opt/bitnami/rabbitmq/conf",
                                                "name": "config-volume"
                                            },
                                            {
                                                "mountPath": "/usr/local/sbin/rabbitmq-api-check",
                                                "name": "healthchecks",
                                                "subPath": "rabbitmq-api-check"
                                            },
                                            {
                                                "mountPath": "/usr/local/sbin/rabbitmq-health-check",
                                                "name": "healthchecks",
                                                "subPath": "rabbitmq-health-check"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/rabbitmq/var/lib/rabbitmq",
                                                "name": "data"
                                            }
                                        ]
                                    }
                                ],
                                "securityContext": {
                                    "fsGroup": 1001,
                                    "runAsUser": 1001
                                },
                                "serviceAccountName": "rabbitmq",
                                "terminationGracePeriodSeconds": 10,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "items": [
                                                {
                                                    "key": "rabbitmq.conf",
                                                    "path": "rabbitmq.conf"
                                                },
                                                {
                                                    "key": "enabled_plugins",
                                                    "path": "enabled_plugins"
                                                }
                                            ],
                                            "name": "rabbitmq-config"
                                        },
                                        "name": "config-volume"
                                    },
                                    {
                                        "configMap": {
                                            "items": [
                                                {
                                                    "key": "rabbitmq-health-check",
                                                    "mode": 111,
                                                    "path": "rabbitmq-health-check"
                                                },
                                                {
                                                    "key": "rabbitmq-api-check",
                                                    "mode": 111,
                                                    "path": "rabbitmq-api-check"
                                                }
                                            ],
                                            "name": "rabbitmq-healthchecks"
                                        },
                                        "name": "healthchecks"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "rabbitmq",
                                        "heritage": "Helm",
                                        "release": "rabbitmq"
                                    },
                                    "name": "data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "metadata": {
                            "labels": {
                                "app": "rabbitmq",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "rabbitmq-6.25.12",
                                "heritage": "Helm",
                                "release": "rabbitmq"
                            },
                            "name": "rabbitmq",
                            "namespace": "default"
                        },
                        "spec": {
                            "podManagementPolicy": "OrderedReady",
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app": "rabbitmq",
                                    "release": "rabbitmq"
                                }
                            },
                            "serviceName": "rabbitmq-headless",
                            "template": {
                                "metadata": {
                                    "annotations": {
                                        "checksum/secret": "00ea58ebecb35675763d6d2512c1c7796be55d5a982ecf9462fea0566611644b"
                                    },
                                    "labels": {
                                        "app": "rabbitmq",
                                        "chart": "rabbitmq-6.25.12",
                                        "release": "rabbitmq"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "command": [
                                                "bash",
                                                "-ec",
                                                "mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\n#persist the erlang cookie in both places for server and cli tools\necho $RABBITMQ_ERL_COOKIE \u003e /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\n#change permission so only the user has access to the cookie file\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\n#copy the mounted configuration to both places\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\n# Apply resources limits\nulimit -n \"${RABBITMQ_ULIMIT_NOFILES}\"\n#replace the default password that is generated\nsed -i \"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\/\\\\\\\\}\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\nexec rabbitmq-server\n"
                                            ],
                                            "env": [
                                                {
                                                    "name": "BITNAMI_DEBUG",
                                                    "value": "false"
                                                },
                                                {
                                                    "name": "MY_POD_IP",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "status.podIP"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "MY_POD_NAME",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.name"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "MY_POD_NAMESPACE",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.namespace"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "K8S_SERVICE_NAME",
                                                    "value": "rabbitmq-headless"
                                                },
                                                {
                                                    "name": "K8S_ADDRESS_TYPE",
                                                    "value": "hostname"
                                                },
                                                {
                                                    "name": "RABBITMQ_NODENAME",
                                                    "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                                },
                                                {
                                                    "name": "K8S_HOSTNAME_SUFFIX",
                                                    "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                                },
                                                {
                                                    "name": "RABBITMQ_LOGS",
                                                    "value": "-"
                                                },
                                                {
                                                    "name": "RABBITMQ_ULIMIT_NOFILES",
                                                    "value": "65536"
                                                },
                                                {
                                                    "name": "RABBITMQ_USE_LONGNAME",
                                                    "value": "true"
                                                },
                                                {
                                                    "name": "RABBITMQ_ERL_COOKIE",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "rabbitmq-erlang-cookie",
                                                            "name": "rabbitmq"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "RABBITMQ_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "rabbitmq-password",
                                                            "name": "rabbitmq"
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "docker.io/bitnami/rabbitmq:3.8.3-debian-10-r84",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "rabbitmq-api-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                    ]
                                                },
                                                "failureThreshold": 6,
                                                "initialDelaySeconds": 120,
                                                "periodSeconds": 30,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 20
                                            },
                                            "name": "rabbitmq",
                                            "ports": [
                                                {
                                                    "containerPort": 4369,
                                                    "name": "epmd"
                                                },
                                                {
                                                    "containerPort": 5672,
                                                    "name": "amqp"
                                                },
                                                {
                                                    "containerPort": 25672,
                                                    "name": "dist"
                                                },
                                                {
                                                    "containerPort": 15672,
                                                    "name": "stats"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "rabbitmq-health-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                    ]
                                                },
                                                "failureThreshold": 3,
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 30,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 20
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/opt/bitnami/rabbitmq/conf",
                                                    "name": "config-volume"
                                                },
                                                {
                                                    "mountPath": "/usr/local/sbin/rabbitmq-api-check",
                                                    "name": "healthchecks",
                                                    "subPath": "rabbitmq-api-check"
                                                },
                                                {
                                                    "mountPath": "/usr/local/sbin/rabbitmq-health-check",
                                                    "name": "healthchecks",
                                                    "subPath": "rabbitmq-health-check"
                                                },
                                                {
                                                    "mountPath": "/opt/bitnami/rabbitmq/var/lib/rabbitmq",
                                                    "name": "data"
                                                }
                                            ]
                                        }
                                    ],
                                    "securityContext": {
                                        "fsGroup": 1001,
                                        "runAsUser": 1001
                                    },
                                    "serviceAccountName": "rabbitmq",
                                    "terminationGracePeriodSeconds": 10,
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "items": [
                                                    {
                                                        "key": "rabbitmq.conf",
                                                        "path": "rabbitmq.conf"
                                                    },
                                                    {
                                                        "key": "enabled_plugins",
                                                        "path": "enabled_plugins"
                                                    }
                                                ],
                                                "name": "rabbitmq-config"
                                            },
                                            "name": "config-volume"
                                        },
                                        {
                                            "configMap": {
                                                "items": [
                                                    {
                                                        "key": "rabbitmq-health-check",
                                                        "mode": 111,
                                                        "path": "rabbitmq-health-check"
                                                    },
                                                    {
                                                        "key": "rabbitmq-api-check",
                                                        "mode": 111,
                                                        "path": "rabbitmq-api-check"
                                                    }
                                                ],
                                                "name": "rabbitmq-healthchecks"
                                            },
                                            "name": "healthchecks"
                                        }
                                    ]
                                }
                            },
                            "updateStrategy": {
                                "type": "RollingUpdate"
                            },
                            "volumeClaimTemplates": [
                                {
                                    "metadata": {
                                        "labels": {
                                            "app": "rabbitmq",
                                            "heritage": "Helm",
                                            "release": "rabbitmq"
                                        },
                                        "name": "data"
                                    },
                                    "spec": {
                                        "accessModes": [
                                            "ReadWriteOnce"
                                        ],
                                        "resources": {
                                            "requests": {
                                                "storage": "8Gi"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"StatefulSet\",\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"rabbitmq-6.25.12\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"rabbitmq\",\"namespace\":\"default\"},\"spec\":{\"podManagementPolicy\":\"OrderedReady\",\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"rabbitmq\",\"release\":\"rabbitmq\"}},\"serviceName\":\"rabbitmq-headless\",\"template\":{\"metadata\":{\"annotations\":{\"checksum/secret\":\"00ea58ebecb35675763d6d2512c1c7796be55d5a982ecf9462fea0566611644b\"},\"labels\":{\"app\":\"rabbitmq\",\"chart\":\"rabbitmq-6.25.12\",\"release\":\"rabbitmq\"}},\"spec\":{\"containers\":[{\"command\":[\"bash\",\"-ec\",\"mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\\n#persist the erlang cookie in both places for server and cli tools\\necho $RABBITMQ_ERL_COOKIE \\u003e /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\\n#change permission so only the user has access to the cookie file\\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\\n#copy the mounted configuration to both places\\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\\n# Apply resources limits\\nulimit -n \\\"${RABBITMQ_ULIMIT_NOFILES}\\\"\\n#replace the default password that is generated\\nsed -i \\\"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\\\\\/\\\\\\\\\\\\\\\\}\\\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\\nexec rabbitmq-server\\n\"],\"env\":[{\"name\":\"BITNAMI_DEBUG\",\"value\":\"false\"},{\"name\":\"MY_POD_IP\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"status.podIP\"}}},{\"name\":\"MY_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"MY_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}},{\"name\":\"K8S_SERVICE_NAME\",\"value\":\"rabbitmq-headless\"},{\"name\":\"K8S_ADDRESS_TYPE\",\"value\":\"hostname\"},{\"name\":\"RABBITMQ_NODENAME\",\"value\":\"rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\"},{\"name\":\"K8S_HOSTNAME_SUFFIX\",\"value\":\".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local\"},{\"name\":\"RABBITMQ_LOGS\",\"value\":\"-\"},{\"name\":\"RABBITMQ_ULIMIT_NOFILES\",\"value\":\"65536\"},{\"name\":\"RABBITMQ_USE_LONGNAME\",\"value\":\"true\"},{\"name\":\"RABBITMQ_ERL_COOKIE\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"rabbitmq-erlang-cookie\",\"name\":\"rabbitmq\"}}},{\"name\":\"RABBITMQ_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"rabbitmq-password\",\"name\":\"rabbitmq\"}}}],\"image\":\"docker.io/bitnami/rabbitmq:3.8.3-debian-10-r84\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"rabbitmq-api-check \\\"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\\\" '{\\\"status\\\":\\\"ok\\\"}'\"]},\"failureThreshold\":6,\"initialDelaySeconds\":120,\"periodSeconds\":30,\"successThreshold\":1,\"timeoutSeconds\":20},\"name\":\"rabbitmq\",\"ports\":[{\"containerPort\":4369,\"name\":\"epmd\"},{\"containerPort\":5672,\"name\":\"amqp\"},{\"containerPort\":25672,\"name\":\"dist\"},{\"containerPort\":15672,\"name\":\"stats\"}],\"readinessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"rabbitmq-health-check \\\"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\\\" '{\\\"status\\\":\\\"ok\\\"}'\"]},\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":30,\"successThreshold\":1,\"timeoutSeconds\":20},\"volumeMounts\":[{\"mountPath\":\"/opt/bitnami/rabbitmq/conf\",\"name\":\"config-volume\"},{\"mountPath\":\"/usr/local/sbin/rabbitmq-api-check\",\"name\":\"healthchecks\",\"subPath\":\"rabbitmq-api-check\"},{\"mountPath\":\"/usr/local/sbin/rabbitmq-health-check\",\"name\":\"healthchecks\",\"subPath\":\"rabbitmq-health-check\"},{\"mountPath\":\"/opt/bitnami/rabbitmq/var/lib/rabbitmq\",\"name\":\"data\"}]}],\"securityContext\":{\"fsGroup\":1001,\"runAsUser\":1001},\"serviceAccountName\":\"rabbitmq\",\"terminationGracePeriodSeconds\":10,\"volumes\":[{\"configMap\":{\"items\":[{\"key\":\"rabbitmq.conf\",\"path\":\"rabbitmq.conf\"},{\"key\":\"enabled_plugins\",\"path\":\"enabled_plugins\"}],\"name\":\"rabbitmq-config\"},\"name\":\"config-volume\"},{\"configMap\":{\"items\":[{\"key\":\"rabbitmq-health-check\",\"mode\":111,\"path\":\"rabbitmq-health-check\"},{\"key\":\"rabbitmq-api-check\",\"mode\":111,\"path\":\"rabbitmq-api-check\"}],\"name\":\"rabbitmq-healthchecks\"},\"name\":\"healthchecks\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"},\"volumeClaimTemplates\":[{\"metadata\":{\"labels\":{\"app\":\"rabbitmq\",\"heritage\":\"Helm\",\"release\":\"rabbitmq\"},\"name\":\"data\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"8Gi\"}}}}]}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:03Z",
                        "generation": 1,
                        "labels": {
                            "app": "rabbitmq",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "rabbitmq-6.25.12",
                            "heritage": "Helm",
                            "release": "rabbitmq"
                        },
                        "name": "rabbitmq",
                        "namespace": "default",
                        "resourceVersion": "4824",
                        "selfLink": "/apis/apps/v1/namespaces/default/statefulsets/rabbitmq",
                        "uid": "a1d304c0-178a-4858-9234-073be59131a8"
                    },
                    "spec": {
                        "podManagementPolicy": "OrderedReady",
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "rabbitmq",
                                "release": "rabbitmq"
                            }
                        },
                        "serviceName": "rabbitmq-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/secret": "00ea58ebecb35675763d6d2512c1c7796be55d5a982ecf9462fea0566611644b"
                                },
                                "labels": {
                                    "app": "rabbitmq",
                                    "chart": "rabbitmq-6.25.12",
                                    "release": "rabbitmq"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "bash",
                                            "-ec",
                                            "mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/\nmkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/\ntouch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start\n#persist the erlang cookie in both places for server and cli tools\necho $RABBITMQ_ERL_COOKIE \u003e /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\ncp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/\n#change permission so only the user has access to the cookie file\nchmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie\n#copy the mounted configuration to both places\ncp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq\n# Apply resources limits\nulimit -n \"${RABBITMQ_ULIMIT_NOFILES}\"\n#replace the default password that is generated\nsed -i \"/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\\\/\\\\\\\\}\" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf\nexec rabbitmq-server\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "BITNAMI_DEBUG",
                                                "value": "false"
                                            },
                                            {
                                                "name": "MY_POD_IP",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "status.podIP"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MY_POD_NAME",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "MY_POD_NAMESPACE",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.namespace"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "K8S_SERVICE_NAME",
                                                "value": "rabbitmq-headless"
                                            },
                                            {
                                                "name": "K8S_ADDRESS_TYPE",
                                                "value": "hostname"
                                            },
                                            {
                                                "name": "RABBITMQ_NODENAME",
                                                "value": "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                            },
                                            {
                                                "name": "K8S_HOSTNAME_SUFFIX",
                                                "value": ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
                                            },
                                            {
                                                "name": "RABBITMQ_LOGS",
                                                "value": "-"
                                            },
                                            {
                                                "name": "RABBITMQ_ULIMIT_NOFILES",
                                                "value": "65536"
                                            },
                                            {
                                                "name": "RABBITMQ_USE_LONGNAME",
                                                "value": "true"
                                            },
                                            {
                                                "name": "RABBITMQ_ERL_COOKIE",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "rabbitmq-erlang-cookie",
                                                        "name": "rabbitmq"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "RABBITMQ_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "rabbitmq-password",
                                                        "name": "rabbitmq"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "docker.io/bitnami/rabbitmq:3.8.3-debian-10-r84",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "rabbitmq-api-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                ]
                                            },
                                            "failureThreshold": 6,
                                            "initialDelaySeconds": 120,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 20
                                        },
                                        "name": "rabbitmq",
                                        "ports": [
                                            {
                                                "containerPort": 4369,
                                                "name": "epmd",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 5672,
                                                "name": "amqp",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 25672,
                                                "name": "dist",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 15672,
                                                "name": "stats",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "rabbitmq-health-check \"http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node\" '{\"status\":\"ok\"}'"
                                                ]
                                            },
                                            "failureThreshold": 3,
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 30,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 20
                                        },
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/opt/bitnami/rabbitmq/conf",
                                                "name": "config-volume"
                                            },
                                            {
                                                "mountPath": "/usr/local/sbin/rabbitmq-api-check",
                                                "name": "healthchecks",
                                                "subPath": "rabbitmq-api-check"
                                            },
                                            {
                                                "mountPath": "/usr/local/sbin/rabbitmq-health-check",
                                                "name": "healthchecks",
                                                "subPath": "rabbitmq-health-check"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/rabbitmq/var/lib/rabbitmq",
                                                "name": "data"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 1001,
                                    "runAsUser": 1001
                                },
                                "serviceAccount": "rabbitmq",
                                "serviceAccountName": "rabbitmq",
                                "terminationGracePeriodSeconds": 10,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "items": [
                                                {
                                                    "key": "rabbitmq.conf",
                                                    "path": "rabbitmq.conf"
                                                },
                                                {
                                                    "key": "enabled_plugins",
                                                    "path": "enabled_plugins"
                                                }
                                            ],
                                            "name": "rabbitmq-config"
                                        },
                                        "name": "config-volume"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "items": [
                                                {
                                                    "key": "rabbitmq-health-check",
                                                    "mode": 111,
                                                    "path": "rabbitmq-health-check"
                                                },
                                                {
                                                    "key": "rabbitmq-api-check",
                                                    "mode": 111,
                                                    "path": "rabbitmq-api-check"
                                                }
                                            ],
                                            "name": "rabbitmq-healthchecks"
                                        },
                                        "name": "healthchecks"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "rabbitmq",
                                        "heritage": "Helm",
                                        "release": "rabbitmq"
                                    },
                                    "name": "data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    },
                                    "volumeMode": "Filesystem"
                                },
                                "status": {
                                    "phase": "Pending"
                                }
                            }
                        ]
                    },
                    "status": {
                        "collisionCount": 0,
                        "currentReplicas": 1,
                        "currentRevision": "rabbitmq-5d8b9c44f9",
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updateRevision": "rabbitmq-5d8b9c44f9",
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::rabbitmq",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:StatefulSet::default/rabbitmq",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:StatefulSet::default/rabbitmq"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:StatefulSet::default/redis-master",
                "custom": true,
                "id": "default/redis-master",
                "type": "kubernetes:apps/v1:StatefulSet",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-master",
                        "namespace": "default"
                    },
                    "spec": {
                        "selector": {
                            "matchLabels": {
                                "app": "redis",
                                "release": "redis",
                                "role": "master"
                            }
                        },
                        "serviceName": "redis-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                    "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                    "checksum/secret": "5d44562724966cfee9f3bc6bc3c19070cc82c96db358573087b6eac0c5f8e51c"
                                },
                                "labels": {
                                    "app": "redis",
                                    "chart": "redis-10.6.13",
                                    "release": "redis",
                                    "role": "master"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n/run.sh ${ARGS[@]}\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "REDIS_REPLICATION_MODE",
                                                "value": "master"
                                            },
                                            {
                                                "name": "REDIS_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_PORT",
                                                "value": "6379"
                                            }
                                        ],
                                        "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_liveness_local.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379,
                                                "name": "redis"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_readiness_local.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "securityContext": {
                                            "runAsUser": 1001
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/health",
                                                "name": "health"
                                            },
                                            {
                                                "mountPath": "/data",
                                                "name": "redis-data"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                "name": "config"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/etc/",
                                                "name": "redis-tmp-conf"
                                            }
                                        ]
                                    }
                                ],
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccountName": "default",
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 493,
                                            "name": "redis-health"
                                        },
                                        "name": "health"
                                    },
                                    {
                                        "configMap": {
                                            "name": "redis"
                                        },
                                        "name": "config"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "redis-tmp-conf"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "redis",
                                        "component": "master",
                                        "heritage": "Helm",
                                        "release": "redis"
                                    },
                                    "name": "redis-data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-master",
                            "namespace": "default"
                        },
                        "spec": {
                            "selector": {
                                "matchLabels": {
                                    "app": "redis",
                                    "release": "redis",
                                    "role": "master"
                                }
                            },
                            "serviceName": "redis-headless",
                            "template": {
                                "metadata": {
                                    "annotations": {
                                        "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                        "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                        "checksum/secret": "5d44562724966cfee9f3bc6bc3c19070cc82c96db358573087b6eac0c5f8e51c"
                                    },
                                    "labels": {
                                        "app": "redis",
                                        "chart": "redis-10.6.13",
                                        "release": "redis",
                                        "role": "master"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "command": [
                                                "/bin/bash",
                                                "-c",
                                                "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n/run.sh ${ARGS[@]}\n"
                                            ],
                                            "env": [
                                                {
                                                    "name": "REDIS_REPLICATION_MODE",
                                                    "value": "master"
                                                },
                                                {
                                                    "name": "REDIS_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "redis-password",
                                                            "name": "redis"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDIS_PORT",
                                                    "value": "6379"
                                                }
                                            ],
                                            "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "/health/ping_liveness_local.sh 5"
                                                    ]
                                                },
                                                "failureThreshold": 5,
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 5,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "redis",
                                            "ports": [
                                                {
                                                    "containerPort": 6379,
                                                    "name": "redis"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "/health/ping_readiness_local.sh 5"
                                                    ]
                                                },
                                                "failureThreshold": 5,
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 5,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 1
                                            },
                                            "securityContext": {
                                                "runAsUser": 1001
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/health",
                                                    "name": "health"
                                                },
                                                {
                                                    "mountPath": "/data",
                                                    "name": "redis-data"
                                                },
                                                {
                                                    "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                    "name": "config"
                                                },
                                                {
                                                    "mountPath": "/opt/bitnami/redis/etc/",
                                                    "name": "redis-tmp-conf"
                                                }
                                            ]
                                        }
                                    ],
                                    "securityContext": {
                                        "fsGroup": 1001
                                    },
                                    "serviceAccountName": "default",
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "defaultMode": 493,
                                                "name": "redis-health"
                                            },
                                            "name": "health"
                                        },
                                        {
                                            "configMap": {
                                                "name": "redis"
                                            },
                                            "name": "config"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "redis-tmp-conf"
                                        }
                                    ]
                                }
                            },
                            "updateStrategy": {
                                "type": "RollingUpdate"
                            },
                            "volumeClaimTemplates": [
                                {
                                    "metadata": {
                                        "labels": {
                                            "app": "redis",
                                            "component": "master",
                                            "heritage": "Helm",
                                            "release": "redis"
                                        },
                                        "name": "redis-data"
                                    },
                                    "spec": {
                                        "accessModes": [
                                            "ReadWriteOnce"
                                        ],
                                        "resources": {
                                            "requests": {
                                                "storage": "8Gi"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"StatefulSet\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-master\",\"namespace\":\"default\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app\":\"redis\",\"release\":\"redis\",\"role\":\"master\"}},\"serviceName\":\"redis-headless\",\"template\":{\"metadata\":{\"annotations\":{\"checksum/configmap\":\"46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8\",\"checksum/health\":\"11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51\",\"checksum/secret\":\"5d44562724966cfee9f3bc6bc3c19070cc82c96db358573087b6eac0c5f8e51c\"},\"labels\":{\"app\":\"redis\",\"chart\":\"redis-10.6.13\",\"release\":\"redis\",\"role\":\"master\"}},\"spec\":{\"containers\":[{\"command\":[\"/bin/bash\",\"-c\",\"if [[ -n $REDIS_PASSWORD_FILE ]]; then\\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\\n  export REDIS_PASSWORD=$password_aux\\nfi\\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\\n  cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\\nfi\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\\"--port\\\" \\\"${REDIS_PORT}\\\")\\nARGS+=(\\\"--requirepass\\\" \\\"${REDIS_PASSWORD}\\\")\\nARGS+=(\\\"--masterauth\\\" \\\"${REDIS_PASSWORD}\\\")\\nARGS+=(\\\"--include\\\" \\\"/opt/bitnami/redis/etc/redis.conf\\\")\\nARGS+=(\\\"--include\\\" \\\"/opt/bitnami/redis/etc/master.conf\\\")\\n/run.sh ${ARGS[@]}\\n\"],\"env\":[{\"name\":\"REDIS_REPLICATION_MODE\",\"value\":\"master\"},{\"name\":\"REDIS_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"redis-password\",\"name\":\"redis\"}}},{\"name\":\"REDIS_PORT\",\"value\":\"6379\"}],\"image\":\"docker.io/bitnami/redis:6.0.1-debian-10-r1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"/health/ping_liveness_local.sh 5\"]},\"failureThreshold\":5,\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"redis\",\"ports\":[{\"containerPort\":6379,\"name\":\"redis\"}],\"readinessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"/health/ping_readiness_local.sh 5\"]},\"failureThreshold\":5,\"initialDelaySeconds\":5,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":1},\"securityContext\":{\"runAsUser\":1001},\"volumeMounts\":[{\"mountPath\":\"/health\",\"name\":\"health\"},{\"mountPath\":\"/data\",\"name\":\"redis-data\"},{\"mountPath\":\"/opt/bitnami/redis/mounted-etc\",\"name\":\"config\"},{\"mountPath\":\"/opt/bitnami/redis/etc/\",\"name\":\"redis-tmp-conf\"}]}],\"securityContext\":{\"fsGroup\":1001},\"serviceAccountName\":\"default\",\"volumes\":[{\"configMap\":{\"defaultMode\":493,\"name\":\"redis-health\"},\"name\":\"health\"},{\"configMap\":{\"name\":\"redis\"},\"name\":\"config\"},{\"emptyDir\":{},\"name\":\"redis-tmp-conf\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"},\"volumeClaimTemplates\":[{\"metadata\":{\"labels\":{\"app\":\"redis\",\"component\":\"master\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-data\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"8Gi\"}}}}]}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:00Z",
                        "generation": 1,
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-master",
                        "namespace": "default",
                        "resourceVersion": "4872",
                        "selfLink": "/apis/apps/v1/namespaces/default/statefulsets/redis-master",
                        "uid": "a96adaaa-76b4-4fde-88a5-e0e1fa45630f"
                    },
                    "spec": {
                        "podManagementPolicy": "OrderedReady",
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "redis",
                                "release": "redis",
                                "role": "master"
                            }
                        },
                        "serviceName": "redis-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                    "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                    "checksum/secret": "5d44562724966cfee9f3bc6bc3c19070cc82c96db358573087b6eac0c5f8e51c"
                                },
                                "labels": {
                                    "app": "redis",
                                    "chart": "redis-10.6.13",
                                    "release": "redis",
                                    "role": "master"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/master.conf\")\n/run.sh ${ARGS[@]}\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "REDIS_REPLICATION_MODE",
                                                "value": "master"
                                            },
                                            {
                                                "name": "REDIS_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_PORT",
                                                "value": "6379"
                                            }
                                        ],
                                        "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_liveness_local.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379,
                                                "name": "redis",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_readiness_local.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 5,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 1
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsUser": 1001
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/health",
                                                "name": "health"
                                            },
                                            {
                                                "mountPath": "/data",
                                                "name": "redis-data"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                "name": "config"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/etc/",
                                                "name": "redis-tmp-conf"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccount": "default",
                                "serviceAccountName": "default",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 493,
                                            "name": "redis-health"
                                        },
                                        "name": "health"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "redis"
                                        },
                                        "name": "config"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "redis-tmp-conf"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "redis",
                                        "component": "master",
                                        "heritage": "Helm",
                                        "release": "redis"
                                    },
                                    "name": "redis-data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    },
                                    "volumeMode": "Filesystem"
                                },
                                "status": {
                                    "phase": "Pending"
                                }
                            }
                        ]
                    },
                    "status": {
                        "collisionCount": 0,
                        "currentReplicas": 1,
                        "currentRevision": "redis-master-75d89d95f5",
                        "observedGeneration": 1,
                        "readyReplicas": 1,
                        "replicas": 1,
                        "updateRevision": "redis-master-75d89d95f5",
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:StatefulSet::default/redis-master",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:StatefulSet::default/redis-master"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Service::default/redis-master",
                "custom": true,
                "id": "default/redis-master",
                "type": "kubernetes:core/v1:Service",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-master",
                        "namespace": "default"
                    },
                    "spec": {
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis",
                            "role": "master"
                        },
                        "type": "ClusterIP"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-master",
                            "namespace": "default"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "name": "redis",
                                    "port": 6379,
                                    "targetPort": "redis"
                                }
                            ],
                            "selector": {
                                "app": "redis",
                                "release": "redis",
                                "role": "master"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Service",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-master\",\"namespace\":\"default\"},\"spec\":{\"ports\":[{\"name\":\"redis\",\"port\":6379,\"targetPort\":\"redis\"}],\"selector\":{\"app\":\"redis\",\"release\":\"redis\",\"role\":\"master\"},\"type\":\"ClusterIP\"}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:58Z",
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-master",
                        "namespace": "default",
                        "resourceVersion": "4082",
                        "selfLink": "/api/v1/namespaces/default/services/redis-master",
                        "uid": "6becffd8-129d-475b-b5af-197c51d02c0d"
                    },
                    "spec": {
                        "clusterIP": "10.0.83.216",
                        "ports": [
                            {
                                "name": "redis",
                                "port": 6379,
                                "protocol": "TCP",
                                "targetPort": "redis"
                            }
                        ],
                        "selector": {
                            "app": "redis",
                            "release": "redis",
                            "role": "master"
                        },
                        "sessionAffinity": "None",
                        "type": "ClusterIP"
                    },
                    "status": {
                        "loadBalancer": {}
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                }
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:StatefulSet::default/redis-slave",
                "custom": true,
                "id": "default/redis-slave",
                "type": "kubernetes:apps/v1:StatefulSet",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-slave",
                        "namespace": "default"
                    },
                    "spec": {
                        "replicas": 2,
                        "selector": {
                            "matchLabels": {
                                "app": "redis",
                                "release": "redis",
                                "role": "slave"
                            }
                        },
                        "serviceName": "redis-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                    "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                    "checksum/secret": "aaba663c8dabcdc87348b34eeaee03c3be54fffe72970df502a3ee1ab75eeee9"
                                },
                                "labels": {
                                    "app": "redis",
                                    "chart": "redis-10.6.13",
                                    "release": "redis",
                                    "role": "slave"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`\n  export REDIS_MASTER_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\n/run.sh \"${ARGS[@]}\"\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "REDIS_REPLICATION_MODE",
                                                "value": "slave"
                                            },
                                            {
                                                "name": "REDIS_MASTER_HOST",
                                                "value": "redis-master-0.redis-headless.default.svc.cluster.local"
                                            },
                                            {
                                                "name": "REDIS_PORT",
                                                "value": "6379"
                                            },
                                            {
                                                "name": "REDIS_MASTER_PORT_NUMBER",
                                                "value": "6379"
                                            },
                                            {
                                                "name": "REDIS_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_MASTER_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_liveness_local_and_master.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379,
                                                "name": "redis"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_readiness_local_and_master.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 10
                                        },
                                        "securityContext": {
                                            "runAsUser": 1001
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/health",
                                                "name": "health"
                                            },
                                            {
                                                "mountPath": "/data",
                                                "name": "redis-data"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                "name": "config"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/etc",
                                                "name": "redis-tmp-conf"
                                            }
                                        ]
                                    }
                                ],
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccountName": "default",
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 493,
                                            "name": "redis-health"
                                        },
                                        "name": "health"
                                    },
                                    {
                                        "configMap": {
                                            "name": "redis"
                                        },
                                        "name": "config"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "sentinel-tmp-conf"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "redis-tmp-conf"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "redis",
                                        "component": "slave",
                                        "heritage": "Helm",
                                        "release": "redis"
                                    },
                                    "name": "redis-data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "metadata": {
                            "labels": {
                                "app": "redis",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "redis-10.6.13",
                                "heritage": "Helm",
                                "release": "redis"
                            },
                            "name": "redis-slave",
                            "namespace": "default"
                        },
                        "spec": {
                            "replicas": 2,
                            "selector": {
                                "matchLabels": {
                                    "app": "redis",
                                    "release": "redis",
                                    "role": "slave"
                                }
                            },
                            "serviceName": "redis-headless",
                            "template": {
                                "metadata": {
                                    "annotations": {
                                        "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                        "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                        "checksum/secret": "aaba663c8dabcdc87348b34eeaee03c3be54fffe72970df502a3ee1ab75eeee9"
                                    },
                                    "labels": {
                                        "app": "redis",
                                        "chart": "redis-10.6.13",
                                        "release": "redis",
                                        "role": "slave"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "command": [
                                                "/bin/bash",
                                                "-c",
                                                "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`\n  export REDIS_MASTER_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\n/run.sh \"${ARGS[@]}\"\n"
                                            ],
                                            "env": [
                                                {
                                                    "name": "REDIS_REPLICATION_MODE",
                                                    "value": "slave"
                                                },
                                                {
                                                    "name": "REDIS_MASTER_HOST",
                                                    "value": "redis-master-0.redis-headless.default.svc.cluster.local"
                                                },
                                                {
                                                    "name": "REDIS_PORT",
                                                    "value": "6379"
                                                },
                                                {
                                                    "name": "REDIS_MASTER_PORT_NUMBER",
                                                    "value": "6379"
                                                },
                                                {
                                                    "name": "REDIS_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "redis-password",
                                                            "name": "redis"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "REDIS_MASTER_PASSWORD",
                                                    "valueFrom": {
                                                        "secretKeyRef": {
                                                            "key": "redis-password",
                                                            "name": "redis"
                                                        }
                                                    }
                                                }
                                            ],
                                            "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                            "imagePullPolicy": "IfNotPresent",
                                            "livenessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "/health/ping_liveness_local_and_master.sh 5"
                                                    ]
                                                },
                                                "failureThreshold": 5,
                                                "initialDelaySeconds": 30,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 5
                                            },
                                            "name": "redis",
                                            "ports": [
                                                {
                                                    "containerPort": 6379,
                                                    "name": "redis"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "/health/ping_readiness_local_and_master.sh 5"
                                                    ]
                                                },
                                                "failureThreshold": 5,
                                                "initialDelaySeconds": 5,
                                                "periodSeconds": 10,
                                                "successThreshold": 1,
                                                "timeoutSeconds": 10
                                            },
                                            "securityContext": {
                                                "runAsUser": 1001
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/health",
                                                    "name": "health"
                                                },
                                                {
                                                    "mountPath": "/data",
                                                    "name": "redis-data"
                                                },
                                                {
                                                    "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                    "name": "config"
                                                },
                                                {
                                                    "mountPath": "/opt/bitnami/redis/etc",
                                                    "name": "redis-tmp-conf"
                                                }
                                            ]
                                        }
                                    ],
                                    "securityContext": {
                                        "fsGroup": 1001
                                    },
                                    "serviceAccountName": "default",
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "defaultMode": 493,
                                                "name": "redis-health"
                                            },
                                            "name": "health"
                                        },
                                        {
                                            "configMap": {
                                                "name": "redis"
                                            },
                                            "name": "config"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "sentinel-tmp-conf"
                                        },
                                        {
                                            "emptyDir": {},
                                            "name": "redis-tmp-conf"
                                        }
                                    ]
                                }
                            },
                            "updateStrategy": {
                                "type": "RollingUpdate"
                            },
                            "volumeClaimTemplates": [
                                {
                                    "metadata": {
                                        "labels": {
                                            "app": "redis",
                                            "component": "slave",
                                            "heritage": "Helm",
                                            "release": "redis"
                                        },
                                        "name": "redis-data"
                                    },
                                    "spec": {
                                        "accessModes": [
                                            "ReadWriteOnce"
                                        ],
                                        "resources": {
                                            "requests": {
                                                "storage": "8Gi"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"StatefulSet\",\"metadata\":{\"labels\":{\"app\":\"redis\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"redis-10.6.13\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-slave\",\"namespace\":\"default\"},\"spec\":{\"replicas\":2,\"selector\":{\"matchLabels\":{\"app\":\"redis\",\"release\":\"redis\",\"role\":\"slave\"}},\"serviceName\":\"redis-headless\",\"template\":{\"metadata\":{\"annotations\":{\"checksum/configmap\":\"46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8\",\"checksum/health\":\"11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51\",\"checksum/secret\":\"aaba663c8dabcdc87348b34eeaee03c3be54fffe72970df502a3ee1ab75eeee9\"},\"labels\":{\"app\":\"redis\",\"chart\":\"redis-10.6.13\",\"release\":\"redis\",\"role\":\"slave\"}},\"spec\":{\"containers\":[{\"command\":[\"/bin/bash\",\"-c\",\"if [[ -n $REDIS_PASSWORD_FILE ]]; then\\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\\n  export REDIS_PASSWORD=$password_aux\\nfi\\nif [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then\\n  password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`\\n  export REDIS_MASTER_PASSWORD=$password_aux\\nfi\\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\\n  cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\\nfi\\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\\nfi\\nARGS=(\\\"--port\\\" \\\"${REDIS_PORT}\\\")\\nARGS+=(\\\"--slaveof\\\" \\\"${REDIS_MASTER_HOST}\\\" \\\"${REDIS_MASTER_PORT_NUMBER}\\\")\\nARGS+=(\\\"--requirepass\\\" \\\"${REDIS_PASSWORD}\\\")\\nARGS+=(\\\"--masterauth\\\" \\\"${REDIS_MASTER_PASSWORD}\\\")\\nARGS+=(\\\"--include\\\" \\\"/opt/bitnami/redis/etc/redis.conf\\\")\\nARGS+=(\\\"--include\\\" \\\"/opt/bitnami/redis/etc/replica.conf\\\")\\n/run.sh \\\"${ARGS[@]}\\\"\\n\"],\"env\":[{\"name\":\"REDIS_REPLICATION_MODE\",\"value\":\"slave\"},{\"name\":\"REDIS_MASTER_HOST\",\"value\":\"redis-master-0.redis-headless.default.svc.cluster.local\"},{\"name\":\"REDIS_PORT\",\"value\":\"6379\"},{\"name\":\"REDIS_MASTER_PORT_NUMBER\",\"value\":\"6379\"},{\"name\":\"REDIS_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"redis-password\",\"name\":\"redis\"}}},{\"name\":\"REDIS_MASTER_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"key\":\"redis-password\",\"name\":\"redis\"}}}],\"image\":\"docker.io/bitnami/redis:6.0.1-debian-10-r1\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"/health/ping_liveness_local_and_master.sh 5\"]},\"failureThreshold\":5,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"redis\",\"ports\":[{\"containerPort\":6379,\"name\":\"redis\"}],\"readinessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"/health/ping_readiness_local_and_master.sh 5\"]},\"failureThreshold\":5,\"initialDelaySeconds\":5,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":10},\"securityContext\":{\"runAsUser\":1001},\"volumeMounts\":[{\"mountPath\":\"/health\",\"name\":\"health\"},{\"mountPath\":\"/data\",\"name\":\"redis-data\"},{\"mountPath\":\"/opt/bitnami/redis/mounted-etc\",\"name\":\"config\"},{\"mountPath\":\"/opt/bitnami/redis/etc\",\"name\":\"redis-tmp-conf\"}]}],\"securityContext\":{\"fsGroup\":1001},\"serviceAccountName\":\"default\",\"volumes\":[{\"configMap\":{\"defaultMode\":493,\"name\":\"redis-health\"},\"name\":\"health\"},{\"configMap\":{\"name\":\"redis\"},\"name\":\"config\"},{\"emptyDir\":{},\"name\":\"sentinel-tmp-conf\"},{\"emptyDir\":{},\"name\":\"redis-tmp-conf\"}]}},\"updateStrategy\":{\"type\":\"RollingUpdate\"},\"volumeClaimTemplates\":[{\"metadata\":{\"labels\":{\"app\":\"redis\",\"component\":\"slave\",\"heritage\":\"Helm\",\"release\":\"redis\"},\"name\":\"redis-data\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"8Gi\"}}}}]}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:00Z",
                        "generation": 1,
                        "labels": {
                            "app": "redis",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "redis-10.6.13",
                            "heritage": "Helm",
                            "release": "redis"
                        },
                        "name": "redis-slave",
                        "namespace": "default",
                        "resourceVersion": "5026",
                        "selfLink": "/apis/apps/v1/namespaces/default/statefulsets/redis-slave",
                        "uid": "421c93b2-307c-4fad-9a4d-d680ecbb4b4c"
                    },
                    "spec": {
                        "podManagementPolicy": "OrderedReady",
                        "replicas": 2,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "redis",
                                "release": "redis",
                                "role": "slave"
                            }
                        },
                        "serviceName": "redis-headless",
                        "template": {
                            "metadata": {
                                "annotations": {
                                    "checksum/configmap": "46b83ae868dbc4c0c55dfd07271e1361990eb71910f79f0a28794003a4c3b0e8",
                                    "checksum/health": "11fe66db2b1b55ed7735e3b3bac028ae66d47dd31765b7335f84ca830a41fd51",
                                    "checksum/secret": "aaba663c8dabcdc87348b34eeaee03c3be54fffe72970df502a3ee1ab75eeee9"
                                },
                                "labels": {
                                    "app": "redis",
                                    "chart": "redis-10.6.13",
                                    "release": "redis",
                                    "role": "slave"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "command": [
                                            "/bin/bash",
                                            "-c",
                                            "if [[ -n $REDIS_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_PASSWORD_FILE}`\n  export REDIS_PASSWORD=$password_aux\nfi\nif [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then\n  password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`\n  export REDIS_MASTER_PASSWORD=$password_aux\nfi\nif [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf\nfi\nif [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then\n  cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf\nfi\nARGS=(\"--port\" \"${REDIS_PORT}\")\nARGS+=(\"--slaveof\" \"${REDIS_MASTER_HOST}\" \"${REDIS_MASTER_PORT_NUMBER}\")\nARGS+=(\"--requirepass\" \"${REDIS_PASSWORD}\")\nARGS+=(\"--masterauth\" \"${REDIS_MASTER_PASSWORD}\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/redis.conf\")\nARGS+=(\"--include\" \"/opt/bitnami/redis/etc/replica.conf\")\n/run.sh \"${ARGS[@]}\"\n"
                                        ],
                                        "env": [
                                            {
                                                "name": "REDIS_REPLICATION_MODE",
                                                "value": "slave"
                                            },
                                            {
                                                "name": "REDIS_MASTER_HOST",
                                                "value": "redis-master-0.redis-headless.default.svc.cluster.local"
                                            },
                                            {
                                                "name": "REDIS_PORT",
                                                "value": "6379"
                                            },
                                            {
                                                "name": "REDIS_MASTER_PORT_NUMBER",
                                                "value": "6379"
                                            },
                                            {
                                                "name": "REDIS_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "REDIS_MASTER_PASSWORD",
                                                "valueFrom": {
                                                    "secretKeyRef": {
                                                        "key": "redis-password",
                                                        "name": "redis"
                                                    }
                                                }
                                            }
                                        ],
                                        "image": "docker.io/bitnami/redis:6.0.1-debian-10-r1",
                                        "imagePullPolicy": "IfNotPresent",
                                        "livenessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_liveness_local_and_master.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 30,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 5
                                        },
                                        "name": "redis",
                                        "ports": [
                                            {
                                                "containerPort": 6379,
                                                "name": "redis",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "/health/ping_readiness_local_and_master.sh 5"
                                                ]
                                            },
                                            "failureThreshold": 5,
                                            "initialDelaySeconds": 5,
                                            "periodSeconds": 10,
                                            "successThreshold": 1,
                                            "timeoutSeconds": 10
                                        },
                                        "resources": {},
                                        "securityContext": {
                                            "runAsUser": 1001
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/health",
                                                "name": "health"
                                            },
                                            {
                                                "mountPath": "/data",
                                                "name": "redis-data"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/mounted-etc",
                                                "name": "config"
                                            },
                                            {
                                                "mountPath": "/opt/bitnami/redis/etc",
                                                "name": "redis-tmp-conf"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 1001
                                },
                                "serviceAccount": "default",
                                "serviceAccountName": "default",
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 493,
                                            "name": "redis-health"
                                        },
                                        "name": "health"
                                    },
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "redis"
                                        },
                                        "name": "config"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "sentinel-tmp-conf"
                                    },
                                    {
                                        "emptyDir": {},
                                        "name": "redis-tmp-conf"
                                    }
                                ]
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "labels": {
                                        "app": "redis",
                                        "component": "slave",
                                        "heritage": "Helm",
                                        "release": "redis"
                                    },
                                    "name": "redis-data"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "8Gi"
                                        }
                                    },
                                    "volumeMode": "Filesystem"
                                },
                                "status": {
                                    "phase": "Pending"
                                }
                            }
                        ]
                    },
                    "status": {
                        "collisionCount": 0,
                        "currentReplicas": 2,
                        "currentRevision": "redis-slave-779dcdb865",
                        "observedGeneration": 1,
                        "readyReplicas": 2,
                        "replicas": 2,
                        "updateRevision": "redis-slave-779dcdb865",
                        "updatedReplicas": 2
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::redis",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:StatefulSet::default/redis-slave",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:StatefulSet::default/redis-slave"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1:StatefulSet::elasticsearch-master",
                "custom": true,
                "id": "default/elasticsearch-master",
                "type": "kubernetes:apps/v1:StatefulSet",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "esMajorVersion": "7"
                        },
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master"
                    },
                    "spec": {
                        "podManagementPolicy": "Parallel",
                        "replicas": 3,
                        "selector": {
                            "matchLabels": {
                                "app": "elasticsearch-master"
                            }
                        },
                        "serviceName": "elasticsearch-master-headless",
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "elasticsearch-master",
                                    "chart": "elasticsearch",
                                    "heritage": "Helm",
                                    "release": "elasticsearch"
                                },
                                "name": "elasticsearch-master"
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "labelSelector": {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "app",
                                                            "operator": "In",
                                                            "values": [
                                                                "elasticsearch-master"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "topologyKey": "kubernetes.io/hostname"
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "node.name",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "cluster.initial_master_nodes",
                                                "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                                            },
                                            {
                                                "name": "discovery.seed_hosts",
                                                "value": "elasticsearch-master-headless"
                                            },
                                            {
                                                "name": "cluster.name",
                                                "value": "elasticsearch"
                                            },
                                            {
                                                "name": "network.host",
                                                "value": "0.0.0.0"
                                            },
                                            {
                                                "name": "ES_JAVA_OPTS",
                                                "value": "-Xmx1g -Xms1g"
                                            },
                                            {
                                                "name": "node.data",
                                                "value": "true"
                                            },
                                            {
                                                "name": "node.ingest",
                                                "value": "true"
                                            },
                                            {
                                                "name": "node.master",
                                                "value": "true"
                                            }
                                        ],
                                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "elasticsearch",
                                        "ports": [
                                            {
                                                "containerPort": 9200,
                                                "name": "http"
                                            },
                                            {
                                                "containerPort": 9300,
                                                "name": "transport"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green\u0026timeout=1s' )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\nif [ -n \"${ELASTIC_USERNAME}\" ] \u0026\u0026 [ -n \"${ELASTIC_PASSWORD}\" ]; then\n  BASIC_AUTH=\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\nelse\n  BASIC_AUTH=''\nfi\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" \u0026\u0026 \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n  if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green\u0026timeout=1s ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                                                ]
                                            },
                                            "failureThreshold": 3,
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 3,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {
                                            "limits": {
                                                "cpu": "1000m",
                                                "memory": "2Gi"
                                            },
                                            "requests": {
                                                "cpu": "1000m",
                                                "memory": "2Gi"
                                            }
                                        },
                                        "securityContext": {
                                            "capabilities": {
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "runAsNonRoot": true,
                                            "runAsUser": 1000
                                        },
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/usr/share/elasticsearch/data",
                                                "name": "elasticsearch-master"
                                            }
                                        ]
                                    }
                                ],
                                "initContainers": [
                                    {
                                        "command": [
                                            "sysctl",
                                            "-w",
                                            "vm.max_map_count=262144"
                                        ],
                                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "configure-sysctl",
                                        "resources": {},
                                        "securityContext": {
                                            "privileged": true,
                                            "runAsUser": 0
                                        }
                                    }
                                ],
                                "securityContext": {
                                    "fsGroup": 1000,
                                    "runAsUser": 1000
                                },
                                "terminationGracePeriodSeconds": 120
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "name": "elasticsearch-master"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "30Gi"
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "StatefulSet",
                        "metadata": {
                            "annotations": {
                                "esMajorVersion": "7"
                            },
                            "labels": {
                                "app": "elasticsearch-master",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "chart": "elasticsearch",
                                "heritage": "Helm",
                                "release": "elasticsearch"
                            },
                            "name": "elasticsearch-master"
                        },
                        "spec": {
                            "podManagementPolicy": "Parallel",
                            "replicas": 3,
                            "selector": {
                                "matchLabels": {
                                    "app": "elasticsearch-master"
                                }
                            },
                            "serviceName": "elasticsearch-master-headless",
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "elasticsearch-master",
                                        "chart": "elasticsearch",
                                        "heritage": "Helm",
                                        "release": "elasticsearch"
                                    },
                                    "name": "elasticsearch-master"
                                },
                                "spec": {
                                    "affinity": {
                                        "podAntiAffinity": {
                                            "requiredDuringSchedulingIgnoredDuringExecution": [
                                                {
                                                    "labelSelector": {
                                                        "matchExpressions": [
                                                            {
                                                                "key": "app",
                                                                "operator": "In",
                                                                "values": [
                                                                    "elasticsearch-master"
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "topologyKey": "kubernetes.io/hostname"
                                                }
                                            ]
                                        }
                                    },
                                    "containers": [
                                        {
                                            "env": [
                                                {
                                                    "name": "node.name",
                                                    "valueFrom": {
                                                        "fieldRef": {
                                                            "fieldPath": "metadata.name"
                                                        }
                                                    }
                                                },
                                                {
                                                    "name": "cluster.initial_master_nodes",
                                                    "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                                                },
                                                {
                                                    "name": "discovery.seed_hosts",
                                                    "value": "elasticsearch-master-headless"
                                                },
                                                {
                                                    "name": "cluster.name",
                                                    "value": "elasticsearch"
                                                },
                                                {
                                                    "name": "network.host",
                                                    "value": "0.0.0.0"
                                                },
                                                {
                                                    "name": "ES_JAVA_OPTS",
                                                    "value": "-Xmx1g -Xms1g"
                                                },
                                                {
                                                    "name": "node.data",
                                                    "value": "true"
                                                },
                                                {
                                                    "name": "node.ingest",
                                                    "value": "true"
                                                },
                                                {
                                                    "name": "node.master",
                                                    "value": "true"
                                                }
                                            ],
                                            "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                            "imagePullPolicy": "IfNotPresent",
                                            "name": "elasticsearch",
                                            "ports": [
                                                {
                                                    "containerPort": 9200,
                                                    "name": "http"
                                                },
                                                {
                                                    "containerPort": 9300,
                                                    "name": "transport"
                                                }
                                            ],
                                            "readinessProbe": {
                                                "exec": {
                                                    "command": [
                                                        "sh",
                                                        "-c",
                                                        "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green\u0026timeout=1s' )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\nif [ -n \"${ELASTIC_USERNAME}\" ] \u0026\u0026 [ -n \"${ELASTIC_PASSWORD}\" ]; then\n  BASIC_AUTH=\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\nelse\n  BASIC_AUTH=''\nfi\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" \u0026\u0026 \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n  if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green\u0026timeout=1s ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                                                    ]
                                                },
                                                "failureThreshold": 3,
                                                "initialDelaySeconds": 10,
                                                "periodSeconds": 10,
                                                "successThreshold": 3,
                                                "timeoutSeconds": 5
                                            },
                                            "resources": {
                                                "limits": {
                                                    "cpu": "1000m",
                                                    "memory": "2Gi"
                                                },
                                                "requests": {
                                                    "cpu": "1000m",
                                                    "memory": "2Gi"
                                                }
                                            },
                                            "securityContext": {
                                                "capabilities": {
                                                    "drop": [
                                                        "ALL"
                                                    ]
                                                },
                                                "runAsNonRoot": true,
                                                "runAsUser": 1000
                                            },
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/usr/share/elasticsearch/data",
                                                    "name": "elasticsearch-master"
                                                }
                                            ]
                                        }
                                    ],
                                    "initContainers": [
                                        {
                                            "command": [
                                                "sysctl",
                                                "-w",
                                                "vm.max_map_count=262144"
                                            ],
                                            "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                            "imagePullPolicy": "IfNotPresent",
                                            "name": "configure-sysctl",
                                            "resources": {},
                                            "securityContext": {
                                                "privileged": true,
                                                "runAsUser": 0
                                            }
                                        }
                                    ],
                                    "securityContext": {
                                        "fsGroup": 1000,
                                        "runAsUser": 1000
                                    },
                                    "terminationGracePeriodSeconds": 120
                                }
                            },
                            "updateStrategy": {
                                "type": "RollingUpdate"
                            },
                            "volumeClaimTemplates": [
                                {
                                    "metadata": {
                                        "name": "elasticsearch-master"
                                    },
                                    "spec": {
                                        "accessModes": [
                                            "ReadWriteOnce"
                                        ],
                                        "resources": {
                                            "requests": {
                                                "storage": "30Gi"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "StatefulSet",
                    "metadata": {
                        "annotations": {
                            "esMajorVersion": "7",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"StatefulSet\",\"metadata\":{\"annotations\":{\"esMajorVersion\":\"7\"},\"labels\":{\"app\":\"elasticsearch-master\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"chart\":\"elasticsearch\",\"heritage\":\"Helm\",\"release\":\"elasticsearch\"},\"name\":\"elasticsearch-master\"},\"spec\":{\"podManagementPolicy\":\"Parallel\",\"replicas\":3,\"selector\":{\"matchLabels\":{\"app\":\"elasticsearch-master\"}},\"serviceName\":\"elasticsearch-master-headless\",\"template\":{\"metadata\":{\"labels\":{\"app\":\"elasticsearch-master\",\"chart\":\"elasticsearch\",\"heritage\":\"Helm\",\"release\":\"elasticsearch\"},\"name\":\"elasticsearch-master\"},\"spec\":{\"affinity\":{\"podAntiAffinity\":{\"requiredDuringSchedulingIgnoredDuringExecution\":[{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"app\",\"operator\":\"In\",\"values\":[\"elasticsearch-master\"]}]},\"topologyKey\":\"kubernetes.io/hostname\"}]}},\"containers\":[{\"env\":[{\"name\":\"node.name\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"cluster.initial_master_nodes\",\"value\":\"elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,\"},{\"name\":\"discovery.seed_hosts\",\"value\":\"elasticsearch-master-headless\"},{\"name\":\"cluster.name\",\"value\":\"elasticsearch\"},{\"name\":\"network.host\",\"value\":\"0.0.0.0\"},{\"name\":\"ES_JAVA_OPTS\",\"value\":\"-Xmx1g -Xms1g\"},{\"name\":\"node.data\",\"value\":\"true\"},{\"name\":\"node.ingest\",\"value\":\"true\"},{\"name\":\"node.master\",\"value\":\"true\"}],\"image\":\"docker.elastic.co/elasticsearch/elasticsearch:7.7.0\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"elasticsearch\",\"ports\":[{\"containerPort\":9200,\"name\":\"http\"},{\"containerPort\":9300,\"name\":\"transport\"}],\"readinessProbe\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"#!/usr/bin/env bash -e\\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green\\u0026timeout=1s' )\\n# Once it has started only check that the node itself is responding\\nSTART_FILE=/tmp/.es_start_file\\n\\nif [ -n \\\"${ELASTIC_USERNAME}\\\" ] \\u0026\\u0026 [ -n \\\"${ELASTIC_PASSWORD}\\\" ]; then\\n  BASIC_AUTH=\\\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\\\"\\nelse\\n  BASIC_AUTH=''\\nfi\\n\\nif [ -f \\\"${START_FILE}\\\" ]; then\\n  echo 'Elasticsearch is already running, lets check the node is healthy'\\n  HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)\\n  RC=$?\\n  if [[ ${RC} -ne 0 ]]; then\\n    echo \\\"curl -XGET -s -k \\\\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}\\\"\\n    exit ${RC}\\n  fi\\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\\n  if [[ ${HTTP_CODE} == \\\"200\\\" ]]; then\\n    exit 0\\n  elif [[ ${HTTP_CODE} == \\\"503\\\" \\u0026\\u0026 \\\"7\\\" == \\\"6\\\" ]]; then\\n    exit 0\\n  else\\n    echo \\\"curl -XGET -s -k \\\\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\\\"\\n    exit 1\\n  fi\\n\\nelse\\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \\\"wait_for_status=green\\u0026timeout=1s\\\" )'\\n  if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green\\u0026timeout=1s ; then\\n    touch ${START_FILE}\\n    exit 0\\n  else\\n    echo 'Cluster is not yet ready (request params: \\\"wait_for_status=green\\u0026timeout=1s\\\" )'\\n    exit 1\\n  fi\\nfi\\n\"]},\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":3,\"timeoutSeconds\":5},\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"1000m\",\"memory\":\"2Gi\"}},\"securityContext\":{\"capabilities\":{\"drop\":[\"ALL\"]},\"runAsNonRoot\":true,\"runAsUser\":1000},\"volumeMounts\":[{\"mountPath\":\"/usr/share/elasticsearch/data\",\"name\":\"elasticsearch-master\"}]}],\"initContainers\":[{\"command\":[\"sysctl\",\"-w\",\"vm.max_map_count=262144\"],\"image\":\"docker.elastic.co/elasticsearch/elasticsearch:7.7.0\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"configure-sysctl\",\"resources\":{},\"securityContext\":{\"privileged\":true,\"runAsUser\":0}}],\"securityContext\":{\"fsGroup\":1000,\"runAsUser\":1000},\"terminationGracePeriodSeconds\":120}},\"updateStrategy\":{\"type\":\"RollingUpdate\"},\"volumeClaimTemplates\":[{\"metadata\":{\"name\":\"elasticsearch-master\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"30Gi\"}}}}]}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:33:05Z",
                        "generation": 1,
                        "labels": {
                            "app": "elasticsearch-master",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "chart": "elasticsearch",
                            "heritage": "Helm",
                            "release": "elasticsearch"
                        },
                        "name": "elasticsearch-master",
                        "namespace": "default",
                        "resourceVersion": "5123",
                        "selfLink": "/apis/apps/v1/namespaces/default/statefulsets/elasticsearch-master",
                        "uid": "69297b1a-b203-4f61-b7ed-6f866c6f3b9b"
                    },
                    "spec": {
                        "podManagementPolicy": "Parallel",
                        "replicas": 3,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "elasticsearch-master"
                            }
                        },
                        "serviceName": "elasticsearch-master-headless",
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "elasticsearch-master",
                                    "chart": "elasticsearch",
                                    "heritage": "Helm",
                                    "release": "elasticsearch"
                                },
                                "name": "elasticsearch-master"
                            },
                            "spec": {
                                "affinity": {
                                    "podAntiAffinity": {
                                        "requiredDuringSchedulingIgnoredDuringExecution": [
                                            {
                                                "labelSelector": {
                                                    "matchExpressions": [
                                                        {
                                                            "key": "app",
                                                            "operator": "In",
                                                            "values": [
                                                                "elasticsearch-master"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "topologyKey": "kubernetes.io/hostname"
                                            }
                                        ]
                                    }
                                },
                                "containers": [
                                    {
                                        "env": [
                                            {
                                                "name": "node.name",
                                                "valueFrom": {
                                                    "fieldRef": {
                                                        "apiVersion": "v1",
                                                        "fieldPath": "metadata.name"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "cluster.initial_master_nodes",
                                                "value": "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
                                            },
                                            {
                                                "name": "discovery.seed_hosts",
                                                "value": "elasticsearch-master-headless"
                                            },
                                            {
                                                "name": "cluster.name",
                                                "value": "elasticsearch"
                                            },
                                            {
                                                "name": "network.host",
                                                "value": "0.0.0.0"
                                            },
                                            {
                                                "name": "ES_JAVA_OPTS",
                                                "value": "-Xmx1g -Xms1g"
                                            },
                                            {
                                                "name": "node.data",
                                                "value": "true"
                                            },
                                            {
                                                "name": "node.ingest",
                                                "value": "true"
                                            },
                                            {
                                                "name": "node.master",
                                                "value": "true"
                                            }
                                        ],
                                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "elasticsearch",
                                        "ports": [
                                            {
                                                "containerPort": 9200,
                                                "name": "http",
                                                "protocol": "TCP"
                                            },
                                            {
                                                "containerPort": 9300,
                                                "name": "transport",
                                                "protocol": "TCP"
                                            }
                                        ],
                                        "readinessProbe": {
                                            "exec": {
                                                "command": [
                                                    "sh",
                                                    "-c",
                                                    "#!/usr/bin/env bash -e\n# If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green\u0026timeout=1s' )\n# Once it has started only check that the node itself is responding\nSTART_FILE=/tmp/.es_start_file\n\nif [ -n \"${ELASTIC_USERNAME}\" ] \u0026\u0026 [ -n \"${ELASTIC_PASSWORD}\" ]; then\n  BASIC_AUTH=\"-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}\"\nelse\n  BASIC_AUTH=''\nfi\n\nif [ -f \"${START_FILE}\" ]; then\n  echo 'Elasticsearch is already running, lets check the node is healthy'\n  HTTP_CODE=$(curl -XGET -s -k ${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/)\n  RC=$?\n  if [[ ${RC} -ne 0 ]]; then\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}\"\n    exit ${RC}\n  fi\n  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x\n  if [[ ${HTTP_CODE} == \"200\" ]]; then\n    exit 0\n  elif [[ ${HTTP_CODE} == \"503\" \u0026\u0026 \"7\" == \"6\" ]]; then\n    exit 0\n  else\n    echo \"curl -XGET -s -k \\${BASIC_AUTH} -o /dev/null -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}\"\n    exit 1\n  fi\n\nelse\n  echo 'Waiting for elasticsearch cluster to become ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n  if curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200/_cluster/health?wait_for_status=green\u0026timeout=1s ; then\n    touch ${START_FILE}\n    exit 0\n  else\n    echo 'Cluster is not yet ready (request params: \"wait_for_status=green\u0026timeout=1s\" )'\n    exit 1\n  fi\nfi\n"
                                                ]
                                            },
                                            "failureThreshold": 3,
                                            "initialDelaySeconds": 10,
                                            "periodSeconds": 10,
                                            "successThreshold": 3,
                                            "timeoutSeconds": 5
                                        },
                                        "resources": {
                                            "limits": {
                                                "cpu": "1",
                                                "memory": "2Gi"
                                            },
                                            "requests": {
                                                "cpu": "1",
                                                "memory": "2Gi"
                                            }
                                        },
                                        "securityContext": {
                                            "capabilities": {
                                                "drop": [
                                                    "ALL"
                                                ]
                                            },
                                            "runAsNonRoot": true,
                                            "runAsUser": 1000
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/usr/share/elasticsearch/data",
                                                "name": "elasticsearch-master"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "initContainers": [
                                    {
                                        "command": [
                                            "sysctl",
                                            "-w",
                                            "vm.max_map_count=262144"
                                        ],
                                        "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                        "imagePullPolicy": "IfNotPresent",
                                        "name": "configure-sysctl",
                                        "resources": {},
                                        "securityContext": {
                                            "privileged": true,
                                            "runAsUser": 0
                                        },
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File"
                                    }
                                ],
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {
                                    "fsGroup": 1000,
                                    "runAsUser": 1000
                                },
                                "terminationGracePeriodSeconds": 120
                            }
                        },
                        "updateStrategy": {
                            "type": "RollingUpdate"
                        },
                        "volumeClaimTemplates": [
                            {
                                "metadata": {
                                    "name": "elasticsearch-master"
                                },
                                "spec": {
                                    "accessModes": [
                                        "ReadWriteOnce"
                                    ],
                                    "resources": {
                                        "requests": {
                                            "storage": "30Gi"
                                        }
                                    },
                                    "volumeMode": "Filesystem"
                                },
                                "status": {
                                    "phase": "Pending"
                                }
                            }
                        ]
                    },
                    "status": {
                        "collisionCount": 0,
                        "currentReplicas": 3,
                        "currentRevision": "elasticsearch-master-5d59cdfc4c",
                        "observedGeneration": 1,
                        "readyReplicas": 3,
                        "replicas": 3,
                        "updateRevision": "elasticsearch-master-5d59cdfc4c",
                        "updatedReplicas": 3
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta1:StatefulSet::elasticsearch-master",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:apps/v1beta2:StatefulSet::elasticsearch-master"
                ]
            },
            {
                "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:apps/v1:Deployment::auth-server-host-deployment",
                "custom": true,
                "id": "default/auth-server-host",
                "type": "kubernetes:apps/v1:Deployment",
                "inputs": {
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host"
                    },
                    "spec": {
                        "replicas": 1,
                        "selector": {
                            "matchLabels": {
                                "app": "auth-server-host"
                            }
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "auth-server-host"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "dotnet",
                                            "AuthServer.Host.dll"
                                        ],
                                        "image": "demomicroserviceregistry.azurecr.io/auth-server-host:latest",
                                        "imagePullPolicy": "Always",
                                        "name": "auth-server-host",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/etc/config",
                                                "name": "auth-server-host-volume"
                                            }
                                        ]
                                    }
                                ],
                                "volumes": [
                                    {
                                        "configMap": {
                                            "name": "auth-server-host"
                                        },
                                        "name": "auth-server-host-volume"
                                    }
                                ]
                            }
                        }
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apps/v1",
                    "__inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "auth-server-host"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "app": "auth-server-host"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "app": "auth-server-host"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "args": [
                                                "dotnet",
                                                "AuthServer.Host.dll"
                                            ],
                                            "image": "demomicroserviceregistry.azurecr.io/auth-server-host:latest",
                                            "imagePullPolicy": "Always",
                                            "name": "auth-server-host",
                                            "volumeMounts": [
                                                {
                                                    "mountPath": "/etc/config",
                                                    "name": "auth-server-host-volume"
                                                }
                                            ]
                                        }
                                    ],
                                    "volumes": [
                                        {
                                            "configMap": {
                                                "name": "auth-server-host"
                                            },
                                            "name": "auth-server-host-volume"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "apiVersion": "apps/v1",
                    "kind": "Deployment",
                    "metadata": {
                        "annotations": {
                            "deployment.kubernetes.io/revision": "1",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"auth-server-host\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"auth-server-host\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"auth-server-host\"}},\"spec\":{\"containers\":[{\"args\":[\"dotnet\",\"AuthServer.Host.dll\"],\"image\":\"demomicroserviceregistry.azurecr.io/auth-server-host:latest\",\"imagePullPolicy\":\"Always\",\"name\":\"auth-server-host\",\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"auth-server-host-volume\"}]}],\"volumes\":[{\"configMap\":{\"name\":\"auth-server-host\"},\"name\":\"auth-server-host-volume\"}]}}}}\n"
                        },
                        "creationTimestamp": "2020-05-18T08:32:56Z",
                        "generation": 1,
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "auth-server-host",
                        "namespace": "default",
                        "resourceVersion": "4044",
                        "selfLink": "/apis/apps/v1/namespaces/default/deployments/auth-server-host",
                        "uid": "5c1b6555-4932-4640-a1bb-fd173b3a5ef7"
                    },
                    "spec": {
                        "progressDeadlineSeconds": 600,
                        "replicas": 1,
                        "revisionHistoryLimit": 10,
                        "selector": {
                            "matchLabels": {
                                "app": "auth-server-host"
                            }
                        },
                        "strategy": {
                            "rollingUpdate": {
                                "maxSurge": "25%",
                                "maxUnavailable": "25%"
                            },
                            "type": "RollingUpdate"
                        },
                        "template": {
                            "metadata": {
                                "labels": {
                                    "app": "auth-server-host"
                                }
                            },
                            "spec": {
                                "containers": [
                                    {
                                        "args": [
                                            "dotnet",
                                            "AuthServer.Host.dll"
                                        ],
                                        "image": "demomicroserviceregistry.azurecr.io/auth-server-host:latest",
                                        "imagePullPolicy": "Always",
                                        "name": "auth-server-host",
                                        "resources": {},
                                        "terminationMessagePath": "/dev/termination-log",
                                        "terminationMessagePolicy": "File",
                                        "volumeMounts": [
                                            {
                                                "mountPath": "/etc/config",
                                                "name": "auth-server-host-volume"
                                            }
                                        ]
                                    }
                                ],
                                "dnsPolicy": "ClusterFirst",
                                "restartPolicy": "Always",
                                "schedulerName": "default-scheduler",
                                "securityContext": {},
                                "terminationGracePeriodSeconds": 30,
                                "volumes": [
                                    {
                                        "configMap": {
                                            "defaultMode": 420,
                                            "name": "auth-server-host"
                                        },
                                        "name": "auth-server-host-volume"
                                    }
                                ]
                            }
                        }
                    },
                    "status": {
                        "conditions": [
                            {
                                "lastTransitionTime": "2020-05-18T08:32:56Z",
                                "lastUpdateTime": "2020-05-18T08:32:56Z",
                                "message": "Deployment does not have minimum availability.",
                                "reason": "MinimumReplicasUnavailable",
                                "status": "False",
                                "type": "Available"
                            },
                            {
                                "lastTransitionTime": "2020-05-18T08:32:56Z",
                                "lastUpdateTime": "2020-05-18T08:32:56Z",
                                "message": "ReplicaSet \"auth-server-host-69ffc59b66\" is progressing.",
                                "reason": "ReplicaSetUpdated",
                                "status": "True",
                                "type": "Progressing"
                            }
                        ],
                        "observedGeneration": 1,
                        "replicas": 1,
                        "unavailableReplicas": 1,
                        "updatedReplicas": 1
                    }
                },
                "parent": "urn:pulumi:dev::abp-microservice-aks::pulumi:pulumi:Stack::abp-microservice-aks-dev",
                "initErrors": [
                    "resource auth-server-host was successfully created, but the Kubernetes API server reported that it failed to fully initialize or become live: 'auth-server-host' timed out waiting to be Ready",
                    "Minimum number of live Pods was not attained",
                    "[Pod auth-server-host-69ffc59b66-wcv6z]: containers with unready status: [auth-server-host] -- [ImagePullBackOff] Back-off pulling image \"demomicroserviceregistry.azurecr.io/auth-server-host:latest\""
                ],
                "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:apps/v1beta1:Deployment::auth-server-host-deployment",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:apps/v1beta2:Deployment::auth-server-host-deployment",
                    "urn:pulumi:dev::abp-microservice-aks::kubernetes:extensions/v1beta1:Deployment::auth-server-host-deployment"
                ]
            }
        ],
        "pending_operations": [
            {
                "resource": {
                    "urn": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart$kubernetes:core/v1:Pod::elasticsearch-qfpea-test",
                    "custom": true,
                    "type": "kubernetes:core/v1:Pod",
                    "inputs": {
                        "apiVersion": "v1",
                        "kind": "Pod",
                        "metadata": {
                            "annotations": {
                                "helm.sh/hook": "test-success"
                            },
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "elasticsearch-qfpea-test"
                        },
                        "spec": {
                            "containers": [
                                {
                                    "command": [
                                        "sh",
                                        "-c",
                                        "#!/usr/bin/env bash -e\ncurl -XGET --fail 'elasticsearch-master:9200/_cluster/health?wait_for_status=green\u0026timeout=1s'\n"
                                    ],
                                    "image": "docker.elastic.co/elasticsearch/elasticsearch:7.7.0",
                                    "name": "elasticsearch-cvpej-test"
                                }
                            ],
                            "restartPolicy": "Never",
                            "securityContext": {
                                "fsGroup": 1000,
                                "runAsUser": 1000
                            }
                        }
                    },
                    "parent": "urn:pulumi:dev::abp-microservice-aks::kubernetes:helm.sh/v2:Chart::elasticsearch",
                    "provider": "urn:pulumi:dev::abp-microservice-aks::pulumi:providers:kubernetes::default_2_0_0::1f571376-15db-484f-9db7-c9a7c7e332c4",
                    "propertyDependencies": {
                        "apiVersion": null,
                        "kind": null,
                        "metadata": null,
                        "spec": null
                    }
                },
                "type": "creating"
            }
        ]
    }
}
